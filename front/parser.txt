Content from directory: C:\Users\siwar\Downloads\ransomware-detection

FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\.env.local

# OpenAI API Key for AI detection capabilities
OPENAI_API_KEY=your_openai_api_key

# Application settings
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_APP_NAME=RansomGuard AI

# Optional: Configure logging level
LOG_LEVEL=info
==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components.json

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\next.config.mjs

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\package.json

{
  "name": "ransomwaredetectionproject",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "latest",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "latest",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1",
    "ai": "latest",
    "@ai-sdk/openai": "latest"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\parser.py

import os
import argparse
from pathlib import Path


def create_ascii_separator():
    """Generate a simple ASCII art separator"""
    return (
            "\n"
            + "=" * 50
            + "\n"
            + "*" * 15
            + " FILE SEPARATOR "
            + "*" * 15
            + "\n"
            + "=" * 50
            + "\n"
    )


def should_ignore_file(file_path):
    """
    Determine if a file should be ignored based on its extension or name
    for Spring Boot and Angular projects.
    """
    # List of extensions to ignore
    ignored_extensions = {
        # Common binary and non-code files
        ".pth", ".pyc", ".class", ".jar", ".war", ".ear", ".zip", ".tar", ".gz", ".rar",
        ".exe", ".dll", ".so", ".dylib", ".obj", ".o", ".a", ".lib", ".png", ".jpg",
        ".jpeg", ".gif", ".bmp", ".ico", ".svg", ".pdf", ".doc", ".docx", ".ppt", ".pptx",
        ".xls", ".xlsx", ".db", ".sqlite", ".sqlite3",

        # Documentation
        ".md", ".markdown", ".txt", ".rst",

        # Package management
        ".lock", ".resolved",

        # Angular/Node specific
        ".map", ".min.js", ".min.css", ".d.ts",

        # IDE and configuration
        ".iml", ".project", ".classpath", ".settings", ".idea", ".vscode",
        ".DS_Store", "Thumbs.db",
    }

    # Specific files to ignore
    ignored_files = {
        ".gitignore", ".gitattributes", ".editorconfig", ".prettierrc",
        "package-lock.json", "yarn.lock", "tsconfig.json",
        "karma.conf.js", "tslint.json", "browserslist", "polyfills.ts",
        "manifest.yml", "Dockerfile", ".dockerignore", ".npmrc", ".npmignore",
        ".env", ".env.example", "mvnw", "mvnw.cmd", "gradlew", "gradlew.bat"
    }

    # Directories to ignore
    ignored_dirs = {
        "node_modules", ".git", ".github", ".gradle", "target", "build", "dist",
        "out", "bin", "obj", "coverage", "e2e", "test-output", "__pycache__", ".next"
    }

    # Check for ignored directories in path
    path_parts = Path(file_path).parts
    for part in path_parts:
        if part in ignored_dirs:
            return True

    # Check extension and filename
    file_name = os.path.basename(file_path)
    file_ext = os.path.splitext(file_path)[1].lower()

    return (file_ext in ignored_extensions) or (file_name in ignored_files)


def process_directory(directory_path, output_file):
    """
    Process all relevant files in the given directory and its subdirectories,
    writing their contents to the output file with separators.
    """
    try:
        # Convert to absolute path for clarity
        abs_dir_path = os.path.abspath(directory_path)
        print(f"Processing directory: {abs_dir_path}")

        # Create the output file
        with open(output_file, "w", encoding="utf-8", errors="replace") as out_f:
            out_f.write(f"Content from directory: {abs_dir_path}\n\n")

            file_count = 0
            skipped_count = 0

            # Walk through the directory
            for root, _, files in os.walk(abs_dir_path):
                for file in files:
                    file_path = os.path.join(root, file)

                    # Skip the output file if it's in the same directory
                    if os.path.abspath(file_path) == os.path.abspath(output_file):
                        continue

                    # Skip files that should be ignored
                    if should_ignore_file(file_path):
                        skipped_count += 1
                        continue

                    try:
                        # Try to read the file as text
                        with open(
                                file_path, "r", encoding="utf-8", errors="replace"
                        ) as f:
                            content = f.read()

                        # Write file path and content to output file
                        out_f.write(f"FILE PATH: {file_path}\n\n")
                        out_f.write(content)
                        out_f.write(create_ascii_separator())

                        file_count += 1
                        print(f"Processed: {file_path}")

                    except Exception as e:
                        print(f"Error processing {file_path}: {e}")
                        out_f.write(f"FILE PATH: {file_path}\n\n")
                        out_f.write(f"[ERROR: Could not read file contents: {e}]")
                        out_f.write(create_ascii_separator())

            out_f.write(f"\nTotal files processed: {file_count}")
            out_f.write(f"\nTotal files skipped: {skipped_count}")
            print(f"Completed! {file_count} files processed and {skipped_count} files skipped. Saved to {output_file}")

    except Exception as e:
        print(f"An error occurred: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="Collect content from relevant files in a directory into a single text file."
    )
    parser.add_argument(
        "directory",
        help="Path to the directory to process (e.g., 'D:/Work-PCD/falsiified/services/user/src/main/java/com/pcd/authentication')"
    )
    parser.add_argument(
        "-o", "--output", default="directory_contents.txt", help="Output file name (e.g., 'authentication.txt')"
    )
    parser.add_argument(
        "--include-ext",
        nargs="+",
        help="Additional file extensions to include (e.g., --include-ext md txt)"
    )
    parser.add_argument(
        "--exclude-ext",
        nargs="+",
        help="Additional file extensions to exclude (e.g., --exclude-ext css scss)"
    )

    args = parser.parse_args()

    process_directory(args.directory, args.output)


if __name__ == "__main__":
    main()
==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\pnpm-lock.yaml

lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false
==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\postcss.config.mjs

/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\tailwind.config.ts

import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "*.{js,ts,jsx,tsx,mdx}"
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			},
  			sidebar: {
  				DEFAULT: 'hsl(var(--sidebar-background))',
  				foreground: 'hsl(var(--sidebar-foreground))',
  				primary: 'hsl(var(--sidebar-primary))',
  				'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
  				accent: 'hsl(var(--sidebar-accent))',
  				'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
  				border: 'hsl(var(--sidebar-border))',
  				ring: 'hsl(var(--sidebar-ring))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\test.plantuml

@startuml test 
actor Juge
actor Expert_Judiciaire
actor Avocat
actor Détective
actor Administrateur

Juge --> (Soumettre_image)
Juge --> (Consulter_rapport)
Juge --> (Accéder_historique)

Expert_Judiciaire --> (Soumettre_image)
Expert_Judiciaire --> (Personnaliser_analyse)
Expert_Judiciaire --> (Annoter_rapport)

Avocat --> (Soumettre_image)
Avocat --> (Consulter_rapport)
Avocat --> (Télécharger_rapport)
Avocat --> (Partager_rapport)

Détective --> (Soumettre_image)
Détective --> (Consulter_rapport)
Détective --> (Télécharger_rapport)
Détective --> (Partager_rapport)

Administrateur --> (Gérer_utilisateurs)
Administrateur --> (Surveiller_performances)
Administrateur --> (Consulter_logs)

@enduml
==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\layout.tsx

import type React from "react"
import { AppProvider } from "@/context/app-context"
import { Toaster } from "@/components/ui/toaster"
import type { Metadata } from "next"
import "./globals.css"

export const metadata: Metadata = {
  title: "v0 App",
  description: "Created with v0",
  generator: "v0.dev",
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <AppProvider>
          {children}
          <Toaster />
        </AppProvider>
      </body>
    </html>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\page.tsx

"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Shield, AlertTriangle, FileText, Activity, Settings, FileSearch, Bell, Brain, Skull } from "lucide-react"
import SystemStatusCard from "@/components/system-status-card"
import RecentAlerts from "@/components/recent-alerts"
import FileActivityChart from "@/components/file-activity-chart"
import { useAppContext } from "@/context/app-context"
import { ScanProgress } from "@/components/scan-progress"
import { ScanDetailsModal } from "@/components/scan-details-modal"
import { FileEventsList } from "@/components/file-events-list"
import { Badge } from "@/components/ui/badge"
import { AiAnalysisPanel } from "@/components/ai-analysis-panel"

export default function Home() {
  const {
    systemStatus,
    activeThreats,
    filesMonitored,
    aiEngineStatus,
    isScanning,
    runScan,
    refreshData,
    alerts,
    runAiAnalysis,
    targetDirectory,
    simulateRansomwareAttack,
  } = useAppContext()

  const [showScanDetails, setShowScanDetails] = useState(false)
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date())
  const [cpuUsage, setCpuUsage] = useState(12)
  const [memoryUsage, setMemoryUsage] = useState(34)

  // Convert numbers to formatted strings
  const formattedFilesMonitored = filesMonitored.toLocaleString()

  // Simulate real-time system metrics
  useEffect(() => {
    const interval = setInterval(() => {
      setCpuUsage(Math.floor(Math.random() * 20) + 10)
      setMemoryUsage(Math.floor(Math.random() * 15) + 30)
      setLastUpdated(new Date())
    }, 5000)

    return () => clearInterval(interval)
  }, [])

  // Get status details based on system status
  const getStatusDetails = () => {
    switch (systemStatus) {
      case "Protected":
        return "Your system is protected and no threats detected"
      case "At Risk":
        return `${activeThreats} active threat(s) detected`
      case "Under Attack":
        return "Ransomware attack in progress! Immediate action required"
      case "Scanning":
        return "System scan in progress"
      default:
        return "System status unknown"
    }
  }

  // Check if there are any critical alerts
  const hasCriticalAlerts = alerts.some(
    (alert) => (alert.severity === "critical" || alert.severity === "high") && alert.status === "active",
  )

  return (
    <div className="flex min-h-screen flex-col">
      <header className="sticky top-0 z-10 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-16 items-center justify-between py-4">
          <div className="flex items-center gap-2">
            <Shield className="h-6 w-6 text-red-500" />
            <span className="text-xl font-bold">RansomGuard AI</span>
          </div>
          <nav className="flex items-center gap-6">
            <Link href="/" className="text-sm font-medium">
              Dashboard
            </Link>
            <Link href="/alerts" className="text-sm font-medium relative">
              Alerts
              {hasCriticalAlerts && (
                <span className="absolute -top-1 -right-1 flex h-3 w-3">
                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                  <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
                </span>
              )}
            </Link>
            <Link href="/reports" className="text-sm font-medium">
              Reports
            </Link>
            <Link href="/settings" className="text-sm font-medium">
              Settings
            </Link>
            <Button variant="outline" size="icon" className="relative">
              <Bell className="h-4 w-4" />
              {hasCriticalAlerts && (
                <span className="absolute -top-1 -right-1 flex h-3 w-3">
                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                  <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
                </span>
              )}
            </Button>
          </nav>
        </div>
      </header>
      <main className="flex-1 container py-6">
        <div className="flex flex-col gap-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
              <p className="text-sm text-muted-foreground mt-1">
                Last updated: {lastUpdated.toLocaleTimeString()}
                <span className="ml-2 font-medium">Target Directory: {targetDirectory}</span>
              </p>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={refreshData}>
                <Settings className="mr-2 h-4 w-4" />
                Configure
              </Button>
              <Button
                size="sm"
                onClick={runScan}
                disabled={isScanning}
                className={systemStatus === "At Risk" || systemStatus === "Under Attack" ? "animate-pulse" : ""}
              >
                <Shield className="mr-2 h-4 w-4" />
                {isScanning ? "Scanning..." : "Run Scan"}
              </Button>
              <Button variant="outline" size="sm" onClick={() => setShowScanDetails(true)}>
                <FileSearch className="mr-2 h-4 w-4" />
                Scan Details
              </Button>
              <Button variant="outline" size="sm" onClick={runAiAnalysis} disabled={aiEngineStatus === "Learning"}>
                <Brain className="mr-2 h-4 w-4" />
                AI Analysis
              </Button>
              <Button variant="destructive" size="sm" onClick={simulateRansomwareAttack}>
                <Skull className="mr-2 h-4 w-4" />
                Simulate Attack
              </Button>
            </div>
          </div>

          {(systemStatus === "At Risk" || systemStatus === "Under Attack") && (
            <div className="bg-red-50 border border-red-200 p-4 rounded-md flex items-center justify-between">
              <div className="flex items-center">
                <AlertTriangle className="h-5 w-5 text-red-600 mr-2" />
                <div>
                  <p className="font-medium text-red-800">Alert: {systemStatus}</p>
                  <p className="text-sm text-red-600">{getStatusDetails()}</p>
                </div>
              </div>
              <Button size="sm" variant="destructive" onClick={runScan} disabled={isScanning}>
                Scan Now
              </Button>
            </div>
          )}

          <ScanProgress />

          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
            <SystemStatusCard
              title="System Status"
              status={systemStatus}
              icon={<Shield className="h-5 w-5" />}
              statusColor={
                systemStatus === "Protected"
                  ? "bg-green-500"
                  : systemStatus === "Scanning"
                    ? "bg-blue-500"
                    : systemStatus === "At Risk"
                      ? "bg-orange-500"
                      : "bg-red-500"
              }
              details={getStatusDetails()}
            />
            <SystemStatusCard
              title="Active Threats"
              status={activeThreats === 0 ? "None" : activeThreats.toString()}
              icon={<AlertTriangle className="h-5 w-5" />}
              statusColor={activeThreats === 0 ? "bg-green-500" : "bg-red-500"}
              details={
                activeThreats === 0 ? "No active threats detected" : `${activeThreats} threats require attention`
              }
              trend={activeThreats > 0 ? "up" : "stable"}
              trendValue={activeThreats > 0 ? "+1 in last hour" : "No change"}
            />
            <SystemStatusCard
              title="Files Monitored"
              status={formattedFilesMonitored}
              icon={<FileText className="h-5 w-5" />}
              statusColor="bg-blue-500"
              details={`Monitoring ${formattedFilesMonitored} files in ${targetDirectory}`}
              trend="up"
              trendValue="+5 since last scan"
            />
            <SystemStatusCard
              title="AI Engine"
              status={aiEngineStatus}
              icon={<Activity className="h-5 w-5" />}
              statusColor={
                aiEngineStatus === "Online"
                  ? "bg-green-500"
                  : aiEngineStatus === "Learning"
                    ? "bg-blue-500"
                    : "bg-red-500"
              }
              details={`AI engine is ${aiEngineStatus.toLowerCase()} and ${
                aiEngineStatus === "Online"
                  ? "actively monitoring"
                  : aiEngineStatus === "Learning"
                    ? "analyzing patterns"
                    : "needs attention"
              }`}
            />
          </div>

          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>File Activity</CardTitle>
                    <CardDescription>Real-time monitoring of file system operations</CardDescription>
                  </div>
                  <Badge variant="outline" className="ml-2">
                    Live
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <FileActivityChart />
                <div className="flex justify-between items-center mt-2 text-xs text-muted-foreground">
                  <div>CPU: {cpuUsage}%</div>
                  <div>Memory: {memoryUsage}%</div>
                  <div>Disk I/O: {Math.floor(Math.random() * 30) + 10} MB/s</div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Recent Alerts</CardTitle>
                    <CardDescription>Latest detected suspicious activities</CardDescription>
                  </div>
                  {hasCriticalAlerts && <Badge variant="destructive">Critical Alerts</Badge>}
                </div>
              </CardHeader>
              <CardContent>
                <RecentAlerts />
              </CardContent>
            </Card>
          </div>

          <AiAnalysisPanel />

          <Card>
            <CardHeader>
              <CardTitle>File System Monitoring</CardTitle>
              <CardDescription>Real-time file system events in {targetDirectory}</CardDescription>
            </CardHeader>
            <CardContent>
              <FileEventsList />
            </CardContent>
          </Card>
        </div>
      </main>
      <ScanDetailsModal isOpen={showScanDetails} onClose={() => setShowScanDetails(false)} />
    </div>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\alerts\page.tsx

"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertCircle, FileWarning, HardDrive, Network, RefreshCw, Filter } from "lucide-react"
import { useAppContext } from "@/context/app-context"

interface Alert {
  id: string
  type: string
  message: string
  timestamp: string
  severity: "low" | "medium" | "high" | "critical"
  status: "active" | "resolved" | "investigating"
  details: string
  icon: React.JSX.Element
}

const alerts: Alert[] = [
  {
    id: "1",
    type: "File Encryption",
    message: "Multiple file extension changes detected",
    timestamp: "Today, 10:25 AM",
    severity: "high",
    status: "active",
    details:
      "Process 'unknown.exe' (PID 1234) attempting to modify multiple files in Documents folder. Entropy analysis indicates encryption in progress.",
    icon: <FileWarning className="h-5 w-5" />,
  },
  {
    id: "2",
    type: "Suspicious Process",
    message: "Process attempting to modify system files",
    timestamp: "Today, 10:00 AM",
    severity: "medium",
    status: "investigating",
    details:
      "Process 'svchost.exe' (PID 5678) showing unusual behavior, attempting to modify protected system files in Windows directory.",
    icon: <HardDrive className="h-5 w-5" />,
  },
  {
    id: "3",
    type: "Network Activity",
    message: "Unusual outbound connection to unknown IP",
    timestamp: "Today, 9:30 AM",
    severity: "low",
    status: "resolved",
    details:
      "Process 'browser.exe' (PID 9012) established connection to IP 192.168.1.100 on port 8080. Connection has been terminated.",
    icon: <Network className="h-5 w-5" />,
  },
  {
    id: "4",
    type: "File Encryption",
    message: "High entropy file operations detected",
    timestamp: "Yesterday, 3:45 PM",
    severity: "critical",
    status: "resolved",
    details:
      "Process 'ransomware.exe' (PID 3456) was detected performing high-entropy write operations to multiple files. Process was terminated and isolated.",
    icon: <FileWarning className="h-5 w-5" />,
  },
]

const severityColors = {
  low: "bg-yellow-100 text-yellow-800",
  medium: "bg-orange-100 text-orange-800",
  high: "bg-red-100 text-red-800",
  critical: "bg-purple-100 text-purple-800",
}

const statusColors = {
  active: "bg-red-100 text-red-800",
  investigating: "bg-blue-100 text-blue-800",
  resolved: "bg-green-100 text-green-800",
}

export default function AlertsPage() {
  const { alerts, resolveAlert, investigateAlert, refreshData } = useAppContext()
  const [selectedAlert, setSelectedAlert] = useState<string | null>(null)

  const handleViewDetails = (id: string) => {
    setSelectedAlert(id === selectedAlert ? null : id)
  }

  return (
    <div className="container py-6">
      <div className="flex flex-col gap-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold tracking-tight">Alerts</h1>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Filter className="mr-2 h-4 w-4" />
              Filter
            </Button>
            <Button variant="outline" size="sm" onClick={refreshData}>
              <RefreshCw className="mr-2 h-4 w-4" />
              Refresh
            </Button>
          </div>
        </div>

        <Tabs defaultValue="all">
          <TabsList>
            <TabsTrigger value="all">All Alerts</TabsTrigger>
            <TabsTrigger value="active">Active</TabsTrigger>
            <TabsTrigger value="investigating">Investigating</TabsTrigger>
            <TabsTrigger value="resolved">Resolved</TabsTrigger>
          </TabsList>

          <TabsContent value="all" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>All Alerts</CardTitle>
                <CardDescription>Complete list of all detected threats and suspicious activities</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {alerts.length > 0 ? (
                    alerts.map((alert) => (
                      <div key={alert.id} className="flex flex-col space-y-3 p-4 rounded-md border">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-4">
                            <div className={`p-2 rounded-full ${severityColors[alert.severity]} bg-opacity-20`}>
                              {alert.icon}
                            </div>
                            <div className="space-y-1">
                              <div className="flex items-center space-x-2">
                                <p className="font-medium">{alert.type}</p>
                                <span className={`text-xs px-2 py-1 rounded-full ${severityColors[alert.severity]}`}>
                                  {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                                </span>
                                <span className={`text-xs px-2 py-1 rounded-full ${statusColors[alert.status]}`}>
                                  {alert.status.charAt(0).toUpperCase() + alert.status.slice(1)}
                                </span>
                              </div>
                              <p className="text-sm">{alert.message}</p>
                              <p className="text-xs text-muted-foreground">{alert.timestamp}</p>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm" onClick={() => handleViewDetails(alert.id)}>
                              {selectedAlert === alert.id ? "Hide Details" : "View Details"}
                            </Button>
                            {alert.status === "active" && (
                              <>
                                <Button variant="outline" size="sm" onClick={() => investigateAlert(alert.id)}>
                                  Investigate
                                </Button>
                                <Button size="sm" onClick={() => resolveAlert(alert.id)}>
                                  Resolve
                                </Button>
                              </>
                            )}
                            {alert.status === "investigating" && (
                              <Button size="sm" onClick={() => resolveAlert(alert.id)}>
                                Mark Resolved
                              </Button>
                            )}
                          </div>
                        </div>
                        {selectedAlert === alert.id && (
                          <div className="text-sm bg-muted p-3 rounded-md">
                            <p className="font-medium mb-1">Details:</p>
                            <p>{alert.details}</p>
                          </div>
                        )}
                      </div>
                    ))
                  ) : (
                    <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
                      <AlertCircle className="h-10 w-10 mb-2" />
                      <p>No alerts found</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="active" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>Active Alerts</CardTitle>
                <CardDescription>Currently active threats requiring attention</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {alerts
                    .filter((a) => a.status === "active")
                    .map((alert) => (
                      <div key={alert.id} className="flex flex-col space-y-3 p-4 rounded-md border">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-4">
                            <div className={`p-2 rounded-full ${severityColors[alert.severity]} bg-opacity-20`}>
                              {alert.icon}
                            </div>
                            <div className="space-y-1">
                              <div className="flex items-center space-x-2">
                                <p className="font-medium">{alert.type}</p>
                                <span className={`text-xs px-2 py-1 rounded-full ${severityColors[alert.severity]}`}>
                                  {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                                </span>
                              </div>
                              <p className="text-sm">{alert.message}</p>
                              <p className="text-xs text-muted-foreground">{alert.timestamp}</p>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm" onClick={() => handleViewDetails(alert.id)}>
                              {selectedAlert === alert.id ? "Hide Details" : "View Details"}
                            </Button>
                            <Button variant="outline" size="sm" onClick={() => investigateAlert(alert.id)}>
                              Investigate
                            </Button>
                            <Button size="sm" onClick={() => resolveAlert(alert.id)}>
                              Resolve
                            </Button>
                          </div>
                        </div>
                        {selectedAlert === alert.id && (
                          <div className="text-sm bg-muted p-3 rounded-md">
                            <p className="font-medium mb-1">Details:</p>
                            <p>{alert.details}</p>
                          </div>
                        )}
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="investigating" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>Investigating Alerts</CardTitle>
                <CardDescription>Threats being investigated</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {alerts
                    .filter((a) => a.status === "investigating")
                    .map((alert) => (
                      <div key={alert.id} className="flex flex-col space-y-3 p-4 rounded-md border">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-4">
                            <div className={`p-2 rounded-full ${severityColors[alert.severity]} bg-opacity-20`}>
                              {alert.icon}
                            </div>
                            <div className="space-y-1">
                              <div className="flex items-center space-x-2">
                                <p className="font-medium">{alert.type}</p>
                                <span className={`text-xs px-2 py-1 rounded-full ${severityColors[alert.severity]}`}>
                                  {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                                </span>
                              </div>
                              <p className="text-sm">{alert.message}</p>
                              <p className="text-xs text-muted-foreground">{alert.timestamp}</p>
                            </div>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm" onClick={() => handleViewDetails(alert.id)}>
                              {selectedAlert === alert.id ? "Hide Details" : "View Details"}
                            </Button>
                            <Button size="sm" onClick={() => resolveAlert(alert.id)}>
                              Mark Resolved
                            </Button>
                          </div>
                        </div>
                        {selectedAlert === alert.id && (
                          <div className="text-sm bg-muted p-3 rounded-md">
                            <p className="font-medium mb-1">Details:</p>
                            <p>{alert.details}</p>
                          </div>
                        )}
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="resolved" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>Resolved Alerts</CardTitle>
                <CardDescription>Resolved threats</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {alerts
                    .filter((a) => a.status === "resolved")
                    .map((alert) => (
                      <div key={alert.id} className="flex flex-col space-y-3 p-4 rounded-md border">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-4">
                            <div className={`p-2 rounded-full ${severityColors[alert.severity]} bg-opacity-20`}>
                              {alert.icon}
                            </div>
                            <div className="space-y-1">
                              <div className="flex items-center space-x-2">
                                <p className="font-medium">{alert.type}</p>
                                <span className={`text-xs px-2 py-1 rounded-full ${severityColors[alert.severity]}`}>
                                  {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                                </span>
                              </div>
                              <p className="text-sm">{alert.message}</p>
                              <p className="text-xs text-muted-foreground">{alert.timestamp}</p>
                            </div>
                          </div>
                          <Button variant="outline" size="sm" onClick={() => handleViewDetails(alert.id)}>
                            {selectedAlert === alert.id ? "Hide Details" : "View Details"}
                          </Button>
                        </div>
                        {selectedAlert === alert.id && (
                          <div className="text-sm bg-muted p-3 rounded-md">
                            <p className="font-medium mb-1">Details:</p>
                            <p>{alert.details}</p>
                          </div>
                        )}
                      </div>
                    ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\api\block\route.ts

import { type NextRequest, NextResponse } from "next/server"

interface BlockRequest {
  processId: number
  processName: string
  reason: string
  threatLevel: "low" | "medium" | "high" | "critical"
  autoBlocked: boolean
}

export async function POST(request: NextRequest) {
  try {
    const data = (await request.json()) as BlockRequest

    if (!data.processId || !data.processName || !data.reason) {
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 })
    }

    // In a real implementation, this would connect to a system service to block the process
    // For demonstration, we'll simulate a successful blocking operation

    console.log(`Blocking process: ${data.processName} (PID: ${data.processId})`)
    console.log(`Reason: ${data.reason}`)
    console.log(`Threat Level: ${data.threatLevel}`)
    console.log(`Auto Blocked: ${data.autoBlocked}`)

    // Simulate a slight delay for realism
    await new Promise((resolve) => setTimeout(resolve, 500))

    return NextResponse.json({
      status: "success",
      timestamp: Date.now(),
      message: `Process ${data.processName} (PID: ${data.processId}) has been blocked`,
      actionTaken: "process_terminated",
      additionalActions: ["network_isolation_enabled", "system_snapshot_created"],
    })
  } catch (error) {
    console.error("Error in process blocking:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\api\detect\route.ts

import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"

// Interface for file activity data
interface FileActivity {
  path: string
  operation: "read" | "write" | "delete" | "rename" | "permission_change"
  timestamp: number
  process: {
    name: string
    pid: number
    path: string
  }
  metadata?: {
    oldPath?: string
    newPath?: string
    oldPermissions?: string
    newPermissions?: string
    fileSize?: number
    entropy?: number
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    const fileActivities: FileActivity[] = data.activities

    if (!fileActivities || !Array.isArray(fileActivities) || fileActivities.length === 0) {
      return NextResponse.json({ error: "Invalid input: file activities array is required" }, { status: 400 })
    }

    // Analyze file activities for ransomware patterns
    const analysisResult = await analyzeFileActivities(fileActivities)

    return NextResponse.json(analysisResult)
  } catch (error) {
    console.error("Error in ransomware detection:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

async function analyzeFileActivities(activities: FileActivity[]) {
  // Extract features for AI analysis
  const features = extractFeatures(activities)

  // Use AI to analyze the features
  const aiAnalysis = await performAIAnalysis(features)

  return {
    threatDetected: aiAnalysis.threatDetected,
    confidence: aiAnalysis.confidence,
    details: aiAnalysis.details,
    recommendedActions: aiAnalysis.recommendedActions,
    timestamp: Date.now(),
  }
}

function extractFeatures(activities: FileActivity[]) {
  // Count operations by type
  const operationCounts = {
    read: 0,
    write: 0,
    delete: 0,
    rename: 0,
    permission_change: 0,
  }

  // Track unique processes
  const processes = new Set<string>()

  // Track file extensions being changed
  const extensionChanges: { from: string; to: string }[] = []

  // Track entropy values for write operations
  const writeEntropies: number[] = []

  // Process each activity
  activities.forEach((activity) => {
    // Count operation types
    operationCounts[activity.operation]++

    // Track unique processes
    processes.add(`${activity.process.name}:${activity.process.pid}`)

    // Check for extension changes in rename operations
    if (activity.operation === "rename" && activity.metadata?.oldPath && activity.metadata?.newPath) {
      const oldExt = activity.metadata.oldPath.split(".").pop() || ""
      const newExt = activity.metadata.newPath.split(".").pop() || ""

      if (oldExt !== newExt) {
        extensionChanges.push({ from: oldExt, to: newExt })
      }
    }

    // Track entropy for write operations
    if (activity.operation === "write" && activity.metadata?.entropy !== undefined) {
      writeEntropies.push(activity.metadata.entropy)
    }
  })

  // Calculate average entropy for write operations
  const avgWriteEntropy =
    writeEntropies.length > 0 ? writeEntropies.reduce((sum, val) => sum + val, 0) / writeEntropies.length : 0

  return {
    totalActivities: activities.length,
    timespan: activities.length > 0 ? activities[activities.length - 1].timestamp - activities[0].timestamp : 0,
    operationCounts,
    uniqueProcessCount: processes.size,
    processes: Array.from(processes),
    extensionChanges,
    avgWriteEntropy,
    highEntropyWrites: writeEntropies.filter((e) => e > 0.8).length,
  }
}

async function performAIAnalysis(features: any) {
  // For demonstration purposes, we'll use a simple rule-based approach
  // In a real implementation, this would use the AI SDK to analyze the features

  let threatDetected = false
  let confidence = 0
  let details = "No suspicious activity detected"
  const recommendedActions: string[] = []

  // Check for high number of write operations in a short timespan
  if (features.operationCounts.write > 50 && features.timespan < 60000) {
    threatDetected = true
    confidence += 0.3
    details = "High volume of write operations in a short time period"
    recommendedActions.push("Monitor the processes performing these operations")
  }

  // Check for extension changes
  if (features.extensionChanges.length > 10) {
    threatDetected = true
    confidence += 0.4
    details = "Multiple file extension changes detected"
    recommendedActions.push("Block processes changing file extensions")
  }

  // Check for high entropy writes
  if (features.highEntropyWrites > 5) {
    threatDetected = true
    confidence += 0.5
    details = "Multiple high-entropy write operations detected"
    recommendedActions.push("Isolate affected files")
    recommendedActions.push("Terminate processes performing high-entropy writes")
  }

  // In a real implementation, we would use the AI SDK here
  if (threatDetected) {
    try {
      // This is where we would use the AI SDK to analyze the features
      const { text } = await generateText({
        model: openai("gpt-4o"),
        prompt: `Analyze this file system activity for ransomware behavior:
        ${JSON.stringify(features, null, 2)}
        
        Provide a detailed analysis of whether this represents ransomware activity, 
        the confidence level, and recommended actions.`,
      })

      // Parse the AI response (simplified for demonstration)
      // In a real implementation, we would structure the prompt to get a structured response
      return {
        threatDetected: true,
        confidence: Math.min(confidence, 0.95),
        details: details,
        recommendedActions,
        aiAnalysis: text,
      }
    } catch (error) {
      console.error("Error using AI for analysis:", error)
      // Fall back to rule-based results if AI fails
    }
  }

  return {
    threatDetected,
    confidence: Math.min(confidence, 0.95),
    details,
    recommendedActions,
  }
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\api\monitor\route.ts

import { NextResponse } from "next/server"

// Mock file system monitoring data
const generateMockFileSystemEvents = () => {
  const operations = ["read", "write", "delete", "rename", "permission_change"]
  const processes = [
    { name: "explorer.exe", pid: 1234, path: "C:\\Windows\\explorer.exe" },
    { name: "chrome.exe", pid: 5678, path: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe" },
    { name: "word.exe", pid: 9012, path: "C:\\Program Files\\Microsoft Office\\root\\Office16\\WINWORD.EXE" },
    { name: "suspicious.exe", pid: 3456, path: "C:\\Users\\User\\Downloads\\suspicious.exe" },
  ]
  const filePaths = [
    "C:\\Users\\User\\Documents\\important.docx",
    "C:\\Users\\User\\Documents\\financial.xlsx",
    "C:\\Users\\User\\Pictures\\vacation.jpg",
    "C:\\Users\\User\\Downloads\\setup.exe",
    "C:\\Program Files\\Application\\data.db",
  ]

  const events = []
  const now = Date.now()

  for (let i = 0; i < 20; i++) {
    const operation = operations[Math.floor(Math.random() * operations.length)]
    const process = processes[Math.floor(Math.random() * processes.length)]
    const filePath = filePaths[Math.floor(Math.random() * filePaths.length)]

    const event = {
      path: filePath,
      operation,
      timestamp: now - Math.floor(Math.random() * 300000), // Random time in the last 5 minutes
      process: { ...process },
      metadata: {},
    }

    // Add operation-specific metadata
    if (operation === "write") {
      event.metadata = {
        fileSize: Math.floor(Math.random() * 1000000),
        entropy: Math.random(), // Random entropy value between 0 and 1
      }
    } else if (operation === "rename") {
      const oldPath = filePath
      const newPath = filePath.replace(/\.[^/.]+$/, "") + (Math.random() > 0.7 ? ".encrypted" : ".bak")
      event.metadata = {
        oldPath,
        newPath,
      }
    } else if (operation === "permission_change") {
      event.metadata = {
        oldPermissions: "rw-r--r--",
        newPermissions: "rwxrwxrwx",
      }
    }

    events.push(event)
  }

  // Add some suspicious ransomware-like events if random chance
  if (Math.random() > 0.7) {
    const suspiciousProcess = processes[3] // suspicious.exe

    // Add multiple file renames with suspicious extensions
    for (let i = 0; i < 5; i++) {
      const originalPath = `C:\\Users\\User\\Documents\\important_file_${i}.docx`
      events.push({
        path: originalPath,
        operation: "rename",
        timestamp: now - Math.floor(Math.random() * 60000), // Last minute
        process: { ...suspiciousProcess },
        metadata: {
          oldPath: originalPath,
          newPath: `C:\\Users\\User\\Documents\\important_file_${i}.docx.locked`,
        },
      })
    }

    // Add high entropy writes
    for (let i = 0; i < 5; i++) {
      events.push({
        path: `C:\\Users\\User\\Documents\\file_${i}.docx`,
        operation: "write",
        timestamp: now - Math.floor(Math.random() * 60000), // Last minute
        process: { ...suspiciousProcess },
        metadata: {
          fileSize: Math.floor(Math.random() * 1000000),
          entropy: 0.95 + Math.random() * 0.05, // Very high entropy (0.95-1.0)
        },
      })
    }
  }

  return events
}

export async function GET() {
  try {
    // In a real implementation, this would connect to a file system monitoring service
    const fileSystemEvents = generateMockFileSystemEvents()

    return NextResponse.json({
      status: "success",
      timestamp: Date.now(),
      events: fileSystemEvents,
    })
  } catch (error) {
    console.error("Error in file system monitoring:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\app\settings\page.tsx

"use client"

import { useState } from "react"
import { Checkbox } from "@/components/ui/checkbox"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Slider } from "@/components/ui/slider"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Save, RotateCcw } from "lucide-react"
import { useToast } from "@/components/ui/use-toast"

export default function SettingsPage() {
  const { toast } = useToast()
  const [settings, setSettings] = useState({
    autoBlock: true,
    sensitivity: 75,
    confidenceThreshold: 80,
    aiModel: "gpt-4o",
    signatureUpdates: true,
    updateFrequency: "daily",
    customSignatures: true,
    realTimeMonitoring: true,
    locations: {
      documents: true,
      desktop: true,
      downloads: true,
      pictures: true,
      system: false,
    },
  })

  const [isSaving, setIsSaving] = useState(false)

  const handleSaveChanges = () => {
    setIsSaving(true)

    // Simulate API call to save settings
    setTimeout(() => {
      setIsSaving(false)
      toast({
        title: "Settings saved",
        description: "Your settings have been saved successfully.",
      })
    }, 1000)
  }

  const handleResetDefaults = () => {
    setSettings({
      autoBlock: true,
      sensitivity: 75,
      confidenceThreshold: 80,
      aiModel: "gpt-4o",
      signatureUpdates: true,
      updateFrequency: "daily",
      customSignatures: true,
      realTimeMonitoring: true,
      locations: {
        documents: true,
        desktop: true,
        downloads: true,
        pictures: true,
        system: false,
      },
    })

    toast({
      title: "Settings reset",
      description: "Your settings have been reset to default values.",
    })
  }

  return (
    <div className="container py-6">
      <div className="flex flex-col gap-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={handleResetDefaults}>
              <RotateCcw className="mr-2 h-4 w-4" />
              Reset to Defaults
            </Button>
            <Button size="sm" onClick={handleSaveChanges} disabled={isSaving}>
              <Save className="mr-2 h-4 w-4" />
              {isSaving ? "Saving..." : "Save Changes"}
            </Button>
          </div>
        </div>

        <Tabs defaultValue="detection">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="detection">Detection</TabsTrigger>
            <TabsTrigger value="monitoring">Monitoring</TabsTrigger>
            <TabsTrigger value="notifications">Notifications</TabsTrigger>
            <TabsTrigger value="advanced">Advanced</TabsTrigger>
          </TabsList>

          <TabsContent value="detection" className="mt-6 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>AI Detection Settings</CardTitle>
                <CardDescription>Configure how the AI detection engine analyzes file system behavior</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="auto-block">Automatic Blocking</Label>
                      <p className="text-sm text-muted-foreground">
                        Automatically block processes identified as ransomware
                      </p>
                    </div>
                    <Switch
                      id="auto-block"
                      checked={settings.autoBlock}
                      onCheckedChange={(checked) => setSettings({ ...settings, autoBlock: checked })}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>Detection Sensitivity</Label>
                    <Slider
                      value={[settings.sensitivity]}
                      max={100}
                      step={1}
                      onValueChange={(value) => setSettings({ ...settings, sensitivity: value[0] })}
                    />
                    <div className="flex justify-between text-xs text-muted-foreground">
                      <span>Low (Fewer False Positives)</span>
                      <span>High (Maximum Protection)</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confidence-threshold">Confidence Threshold</Label>
                    <div className="flex items-center gap-2">
                      <Input
                        id="confidence-threshold"
                        type="number"
                        value={settings.confidenceThreshold}
                        onChange={(e) =>
                          setSettings({ ...settings, confidenceThreshold: Number.parseInt(e.target.value) || 0 })
                        }
                        min={0}
                        max={100}
                        className="w-20"
                      />
                      <span className="text-sm text-muted-foreground">%</span>
                    </div>
                    <p className="text-xs text-muted-foreground">
                      Minimum confidence level required for automatic blocking
                    </p>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="ai-model">AI Model</Label>
                    <Select
                      value={settings.aiModel}
                      onValueChange={(value) => setSettings({ ...settings, aiModel: value })}
                    >
                      <SelectTrigger id="ai-model">
                        <SelectValue placeholder="Select AI Model" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="gpt-4o">GPT-4o (Recommended)</SelectItem>
                        <SelectItem value="gpt-4">GPT-4</SelectItem>
                        <SelectItem value="custom">Custom Model</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Ransomware Signatures</CardTitle>
                <CardDescription>Configure known ransomware patterns and behaviors</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="signature-updates">Automatic Signature Updates</Label>
                      <p className="text-sm text-muted-foreground">Automatically update ransomware signatures</p>
                    </div>
                    <Switch
                      id="signature-updates"
                      checked={settings.signatureUpdates}
                      onCheckedChange={(checked) => setSettings({ ...settings, signatureUpdates: checked })}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="update-frequency">Update Frequency</Label>
                    <Select
                      value={settings.updateFrequency}
                      onValueChange={(value) => setSettings({ ...settings, updateFrequency: value })}
                    >
                      <SelectTrigger id="update-frequency">
                        <SelectValue placeholder="Select Frequency" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="hourly">Hourly</SelectItem>
                        <SelectItem value="daily">Daily</SelectItem>
                        <SelectItem value="weekly">Weekly</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="custom-signatures">Custom Signatures</Label>
                      <p className="text-sm text-muted-foreground">Enable custom-defined ransomware signatures</p>
                    </div>
                    <Switch
                      id="custom-signatures"
                      checked={settings.customSignatures}
                      onCheckedChange={(checked) => setSettings({ ...settings, customSignatures: checked })}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="monitoring" className="mt-6 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>File System Monitoring</CardTitle>
                <CardDescription>Configure how the system monitors file activities</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label htmlFor="real-time-monitoring">Real-time Monitoring</Label>
                      <p className="text-sm text-muted-foreground">Monitor file system activities in real-time</p>
                    </div>
                    <Switch
                      id="real-time-monitoring"
                      checked={settings.realTimeMonitoring}
                      onCheckedChange={(checked) => setSettings({ ...settings, realTimeMonitoring: checked })}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>Monitored Locations</Label>
                    <div className="space-y-2">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="location-documents"
                          checked={settings.locations.documents}
                          onCheckedChange={(checked) =>
                            setSettings({
                              ...settings,
                              locations: { ...settings.locations, documents: !!checked },
                            })
                          }
                        />
                        <label htmlFor="location-documents" className="text-sm">
                          Documents
                        </label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="location-desktop"
                          checked={settings.locations.desktop}
                          onCheckedChange={(checked) =>
                            setSettings({
                              ...settings,
                              locations: { ...settings.locations, desktop: !!checked },
                            })
                          }
                        />
                        <label htmlFor="location-desktop" className="text-sm">
                          Desktop
                        </label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="location-downloads"
                          checked={settings.locations.downloads}
                          onCheckedChange={(checked) =>
                            setSettings({
                              ...settings,
                              locations: { ...settings.locations, downloads: !!checked },
                            })
                          }
                        />
                        <label htmlFor="location-downloads" className="text-sm">
                          Downloads
                        </label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="location-pictures"
                          checked={settings.locations.pictures}
                          onCheckedChange={(checked) =>
                            setSettings({
                              ...settings,
                              locations: { ...settings.locations, pictures: !!checked },
                            })
                          }
                        />
                        <label htmlFor="location-pictures" className="text-sm">
                          Pictures
                        </label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="location-system"
                          checked={settings.locations.system}
                          onCheckedChange={(checked) =>
                            setSettings({
                              ...settings,
                              locations: { ...settings.locations, system: !!checked },
                            })
                          }
                        />
                        <label htmlFor="location-system" className="text-sm">
                          System Folders
                        </label>
                      </div>
                    </div>
                    <Button variant="outline" size="sm" className="mt-2">
                      Add Custom Location
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Other tabs content would go here */}
          <TabsContent value="notifications" className="mt-6 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Notification Settings</CardTitle>
                <CardDescription>Configure how you receive alerts and notifications</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">Notification settings will be available in the next update.</p>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="advanced" className="mt-6 space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Advanced Settings</CardTitle>
                <CardDescription>Configure advanced system settings</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">Advanced settings will be available in the next update.</p>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ai-analysis-panel.tsx

"use client"

import { useAppContext } from "@/context/app-context"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Activity, Brain, AlertTriangle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"

export function AiAnalysisPanel() {
  const { aiPredictions, aiEngineStatus, runAiAnalysis } = useAppContext()

  return (
    <Card>
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center">
              <Brain className="h-5 w-5 mr-2 text-purple-500" />
              AI Analysis
            </CardTitle>
            <CardDescription>Real-time AI threat detection and analysis</CardDescription>
          </div>
          <div className="flex items-center gap-2">
            <Badge
              variant={
                aiEngineStatus === "Online" ? "default" : aiEngineStatus === "Learning" ? "outline" : "destructive"
              }
              className={aiEngineStatus === "Learning" ? "bg-blue-100 text-blue-800 hover:bg-blue-100" : ""}
            >
              {aiEngineStatus}
            </Badge>
            <Button
              size="sm"
              onClick={runAiAnalysis}
              disabled={aiEngineStatus === "Learning"}
              className={aiEngineStatus === "Learning" ? "animate-pulse" : ""}
            >
              {aiEngineStatus === "Learning" ? "Analyzing..." : "Run Analysis"}
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[250px]">
          <div className="space-y-3">
            {aiPredictions.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
                <Activity className="h-10 w-10 mb-2" />
                <p>No AI predictions yet</p>
                <p className="text-sm">Run an analysis to get started</p>
              </div>
            ) : (
              aiPredictions.map((prediction, index) => (
                <div
                  key={index}
                  className={`p-3 rounded-md border ${
                    prediction.confidence > 0.7
                      ? "bg-red-50 border-red-200"
                      : prediction.confidence > 0.4
                        ? "bg-yellow-50 border-yellow-200"
                        : "bg-green-50 border-green-200"
                  }`}
                >
                  <div className="flex items-center justify-between mb-1">
                    <div className="flex items-center">
                      {prediction.confidence > 0.7 ? (
                        <AlertTriangle className="h-4 w-4 mr-2 text-red-500" />
                      ) : prediction.confidence > 0.4 ? (
                        <Activity className="h-4 w-4 mr-2 text-yellow-500" />
                      ) : (
                        <Brain className="h-4 w-4 mr-2 text-green-500" />
                      )}
                      <span className="font-medium">{prediction.prediction}</span>
                    </div>
                    <Badge
                      variant={prediction.confidence > 0.7 ? "destructive" : "outline"}
                      className={
                        prediction.confidence <= 0.7 && prediction.confidence > 0.4
                          ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-100"
                          : prediction.confidence <= 0.4
                            ? "bg-green-100 text-green-800 hover:bg-green-100"
                            : ""
                      }
                    >
                      {Math.round(prediction.confidence * 100)}% Confidence
                    </Badge>
                  </div>
                  <div className="text-sm text-muted-foreground flex justify-between">
                    <span>{prediction.timestamp}</span>
                    {prediction.threatType && <span className="font-medium text-red-600">{prediction.threatType}</span>}
                  </div>
                </div>
              ))
            )}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\alert-detail-modal.tsx

"use client"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { FileText, Brain } from "lucide-react"
import type { Alert } from "@/context/app-context"
import { useAppContext } from "@/context/app-context"

interface AlertDetailModalProps {
  alert: Alert | null
  isOpen: boolean
  onClose: () => void
  onResolve?: (id: string) => void
  onInvestigate?: (id: string) => void
}

export function AlertDetailModal({ alert, isOpen, onClose, onResolve, onInvestigate }: AlertDetailModalProps) {
  const { blockProcess, createBackup } = useAppContext()

  if (!alert) return null

  const severityColors = {
    low: "bg-yellow-100 text-yellow-800",
    medium: "bg-orange-100 text-orange-800",
    high: "bg-red-100 text-red-800",
    critical: "bg-purple-100 text-purple-800",
  }

  const statusColors = {
    active: "bg-red-100 text-red-800",
    investigating: "bg-blue-100 text-blue-800",
    resolved: "bg-green-100 text-green-800",
  }

  const handleBlockProcess = async (pid: number, processName: string) => {
    const success = await blockProcess(pid, processName)
    if (success) {
      // Could show a toast notification here
      console.log(`Process ${processName} (PID: ${pid}) blocked successfully`)
    }
  }

  const handleCreateBackup = async () => {
    await createBackup()
    // Could show a toast notification here
    console.log("Backup created successfully")
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <span>{alert.type}</span>
            <span className={`text-xs px-2 py-1 rounded-full ${severityColors[alert.severity]}`}>
              {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
            </span>
            <span className={`text-xs px-2 py-1 rounded-full ${statusColors[alert.status]}`}>
              {alert.status.charAt(0).toUpperCase() + alert.status.slice(1)}
            </span>
          </DialogTitle>
          <DialogDescription>{alert.message}</DialogDescription>
        </DialogHeader>
        <div className="space-y-4">
          <div>
            <h4 className="text-sm font-medium mb-1">Details</h4>
            <p className="text-sm">{alert.details}</p>
          </div>
          <div>
            <h4 className="text-sm font-medium mb-1">Timestamp</h4>
            <p className="text-sm">{alert.timestamp}</p>
          </div>

          {alert.aiAnalysis && (
            <div className="bg-purple-50 border border-purple-200 rounded-md p-3">
              <h4 className="text-sm font-medium mb-1 flex items-center">
                <Brain className="h-4 w-4 mr-2 text-purple-500" />
                AI Analysis
              </h4>
              <p className="text-sm">{alert.aiAnalysis}</p>
            </div>
          )}

          {alert.affectedFiles && alert.affectedFiles.length > 0 && (
            <div>
              <h4 className="text-sm font-medium mb-1">Affected Files</h4>
              <ScrollArea className="h-[100px] rounded border p-2">
                <div className="space-y-1">
                  {alert.affectedFiles.map((file, index) => (
                    <div key={index} className="text-xs flex items-center">
                      <FileText className="h-3 w-3 mr-2 text-blue-500" />
                      <span className="font-mono">{file}</span>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            </div>
          )}

          {alert.suspiciousProcesses && alert.suspiciousProcesses.length > 0 && (
            <div>
              <h4 className="text-sm font-medium mb-1">Suspicious Processes</h4>
              <div className="space-y-2">
                {alert.suspiciousProcesses.map((process, index) => (
                  <div key={index} className="text-xs p-2 border rounded flex items-start justify-between">
                    <div>
                      <div className="font-medium">
                        {process.name} (PID: {process.pid})
                      </div>
                      <div className="text-muted-foreground mt-1">{process.reason}</div>
                    </div>
                    {!process.reason.includes("BLOCKED") && alert.status !== "resolved" && (
                      <Button
                        size="sm"
                        variant="destructive"
                        className="ml-2"
                        onClick={() => handleBlockProcess(process.pid, process.name)}
                      >
                        Block Process
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div>
            <h4 className="text-sm font-medium mb-1">Recommended Actions</h4>
            <ul className="text-sm list-disc pl-5 space-y-1">
              <li>Isolate affected system</li>
              <li>Backup important files</li>
              <li>Run deep scan</li>
              {alert.suspiciousProcesses && alert.suspiciousProcesses.length > 0 && <li>Block suspicious processes</li>}
            </ul>
          </div>
        </div>
        <DialogFooter className="flex justify-between sm:justify-between">
          <div className="flex gap-2">
            <Button variant="outline" onClick={handleCreateBackup}>
              Create Backup
            </Button>
            <Button variant="outline" onClick={onClose}>
              Close
            </Button>
          </div>
          <div className="flex gap-2">
            {alert.status === "active" && (
              <>
                {onInvestigate && (
                  <Button variant="outline" onClick={() => onInvestigate(alert.id)}>
                    Investigate
                  </Button>
                )}
                {onResolve && <Button onClick={() => onResolve(alert.id)}>Resolve</Button>}
              </>
            )}
            {alert.status === "investigating" && onResolve && (
              <Button onClick={() => onResolve(alert.id)}>Mark Resolved</Button>
            )}
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\file-activity-chart.tsx

"use client"

import { useEffect, useState } from "react"
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts"
import { useAppContext } from "@/context/app-context"

export default function FileActivityChart() {
  const { fileEvents, systemStatus } = useAppContext()
  const [data, setData] = useState<any[]>([])

  // Generate realistic data based on file events and system status
  useEffect(() => {
    // Group events by time (5-minute intervals)
    const now = new Date()
    const timeIntervals: Record<string, { reads: number; writes: number; deletes: number; time: string }> = {}

    // Initialize the last 12 five-minute intervals
    for (let i = 11; i >= 0; i--) {
      const time = new Date(now.getTime() - i * 5 * 60000)
      const timeKey = time.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
      timeIntervals[timeKey] = {
        time: timeKey,
        reads: 0,
        writes: 0,
        deletes: 0,
      }
    }

    // Count events by type and time interval
    fileEvents.forEach((event) => {
      const eventTime = new Date(event.timestamp)
      const timeKey = eventTime.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })

      // Only count events in our time window
      if (timeIntervals[timeKey]) {
        if (event.operation === "create") {
          timeIntervals[timeKey].writes += 1
        } else if (event.operation === "modify") {
          timeIntervals[timeKey].reads += 1
          timeIntervals[timeKey].writes += 1
        } else if (event.operation === "delete") {
          timeIntervals[timeKey].deletes += 1
        }
      }
    })

    // Add baseline activity
    Object.keys(timeIntervals).forEach((key) => {
      // Add baseline activity
      timeIntervals[key].reads += Math.floor(Math.random() * 50) + 100
      timeIntervals[key].writes += Math.floor(Math.random() * 30) + 20

      // If system is at risk or under attack, add suspicious activity spikes
      if (systemStatus === "At Risk" || systemStatus === "Under Attack") {
        const recentInterval = Object.keys(timeIntervals).indexOf(key) > 8
        if (recentInterval) {
          timeIntervals[key].writes += Math.floor(Math.random() * 200) + 100
          timeIntervals[key].deletes += Math.floor(Math.random() * 20) + 5
        }
      }
    })

    // Convert to array for chart
    const chartData = Object.values(timeIntervals)
    setData(chartData)
  }, [fileEvents, systemStatus])

  return (
    <div className="h-[250px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={data} margin={{ top: 5, right: 20, left: 0, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" />
          <XAxis dataKey="time" />
          <YAxis />
          <Tooltip
            formatter={(value, name) => [value, name === "reads" ? "Reads" : name === "writes" ? "Writes" : "Deletes"]}
            labelFormatter={(label) => `Time: ${label}`}
          />
          <Legend />
          <Line
            type="monotone"
            dataKey="reads"
            stroke="#3b82f6"
            name="Reads"
            strokeWidth={2}
            dot={false}
            activeDot={{ r: 6 }}
          />
          <Line
            type="monotone"
            dataKey="writes"
            stroke="#10b981"
            name="Writes"
            strokeWidth={2}
            dot={false}
            activeDot={{ r: 6 }}
          />
          <Line
            type="monotone"
            dataKey="deletes"
            stroke="#ef4444"
            name="Deletes"
            strokeWidth={2}
            dot={false}
            activeDot={{ r: 6 }}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\file-events-list.tsx

"use client"

import { useAppContext } from "@/context/app-context"
import { ScrollArea } from "@/components/ui/scroll-area"
import { FileText, FilePlus, FileX, FileEdit, AlertTriangle, Shield } from "lucide-react"
import type { FileEvent } from "@/services/file-system-monitor"
import { formatDistanceToNow } from "date-fns"
import { Badge } from "@/components/ui/badge"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

export function FileEventsList() {
  const { fileEvents } = useAppContext()

  const getOperationIcon = (operation: string) => {
    switch (operation) {
      case "create":
        return <FilePlus className="h-4 w-4 text-green-500" />
      case "modify":
        return <FileEdit className="h-4 w-4 text-blue-500" />
      case "delete":
        return <FileX className="h-4 w-4 text-red-500" />
      default:
        return <FileText className="h-4 w-4 text-gray-500" />
    }
  }

  const getEventDescription = (event: FileEvent) => {
    const fileName = event.path.split("\\").pop() || event.path

    switch (event.operation) {
      case "create":
        return `File created: ${fileName}`
      case "modify":
        return `File modified: ${fileName}`
      case "delete":
        return `File deleted: ${fileName}`
      case "rename":
        const newName = event.metadata?.newPath?.split("\\").pop() || event.metadata?.newPath || "unknown"
        return `File renamed: ${fileName} → ${newName}`
      default:
        return `File operation: ${fileName}`
    }
  }

  const isHighEntropy = (event: FileEvent) => {
    return event.operation === "modify" && event.metadata?.entropy && event.metadata.entropy > 0.8
  }

  const isSuspiciousRename = (event: FileEvent) => {
    return (
      event.operation === "rename" &&
      event.metadata?.newPath &&
      /\.(encrypted|locked|crypto|ransom|crypt)$/i.test(event.metadata.newPath)
    )
  }

  const isSuspiciousProcess = (event: FileEvent) => {
    return (
      event.process?.name.toLowerCase().includes("suspicious") || event.process?.name.toLowerCase().includes("unknown")
    )
  }

  const getThreatLevel = (event: FileEvent) => {
    if (isHighEntropy(event) && isSuspiciousProcess(event)) {
      return { level: "critical", label: "Critical Threat" }
    } else if (isSuspiciousRename(event)) {
      return { level: "high", label: "High Threat" }
    } else if (isHighEntropy(event) || isSuspiciousProcess(event)) {
      return { level: "medium", label: "Medium Threat" }
    }
    return null
  }

  return (
    <TooltipProvider>
      <div className="space-y-2">
        <h3 className="text-sm font-medium">Real-Time File System Events</h3>
        <ScrollArea className="h-[300px] rounded-md border">
          <div className="p-4 space-y-2">
            {fileEvents.length === 0 ? (
              <div className="flex items-center justify-center h-20 text-sm text-muted-foreground">
                No file events recorded yet
              </div>
            ) : (
              fileEvents.map((event, index) => {
                const threatLevel = getThreatLevel(event)
                return (
                  <div
                    key={index}
                    className={`flex items-start space-x-2 p-2 text-xs rounded-md ${
                      threatLevel?.level === "critical"
                        ? "bg-red-50 border border-red-300"
                        : threatLevel?.level === "high"
                          ? "bg-orange-50 border border-orange-300"
                          : threatLevel?.level === "medium"
                            ? "bg-yellow-50 border border-yellow-300"
                            : "border"
                    }`}
                  >
                    <div className="mt-0.5">{getOperationIcon(event.operation)}</div>
                    <div className="flex-1 space-y-1">
                      <div className="flex items-center justify-between">
                        <span className="font-medium">{getEventDescription(event)}</span>
                        <span className="text-muted-foreground">
                          {formatDistanceToNow(new Date(event.timestamp), { addSuffix: true })}
                        </span>
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="text-muted-foreground">
                          Process: {event.process?.name} (PID: {event.process?.pid})
                        </div>
                        {threatLevel && (
                          <Badge
                            variant={
                              threatLevel.level === "critical"
                                ? "destructive"
                                : threatLevel.level === "high"
                                  ? "destructive"
                                  : "outline"
                            }
                            className={
                              threatLevel.level === "medium" ? "bg-yellow-100 text-yellow-800 hover:bg-yellow-100" : ""
                            }
                          >
                            {threatLevel.label}
                          </Badge>
                        )}
                      </div>
                      {isHighEntropy(event) && (
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="flex items-center text-red-600 cursor-help">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              High entropy detected ({(event.metadata?.entropy || 0).toFixed(2)})
                            </div>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>High entropy indicates potential encryption activity</p>
                          </TooltipContent>
                        </Tooltip>
                      )}
                      {isSuspiciousRename(event) && (
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="flex items-center text-red-600 cursor-help">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              Suspicious file extension
                            </div>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>This extension is commonly used by ransomware</p>
                          </TooltipContent>
                        </Tooltip>
                      )}
                      {isSuspiciousProcess(event) && !isHighEntropy(event) && !isSuspiciousRename(event) && (
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="flex items-center text-orange-600 cursor-help">
                              <Shield className="h-3 w-3 mr-1" />
                              Suspicious process detected
                            </div>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p>This process has been flagged as potentially malicious</p>
                          </TooltipContent>
                        </Tooltip>
                      )}
                    </div>
                  </div>
                )
              })
            )}
          </div>
        </ScrollArea>
      </div>
    </TooltipProvider>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\recent-alerts.tsx

"use client"

import { AlertCircle } from "lucide-react"
import { useAppContext } from "@/context/app-context"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { useState } from "react"
import { AlertDetailModal } from "@/components/alert-detail-modal"

const severityColors = {
  low: "bg-yellow-100 text-yellow-800",
  medium: "bg-orange-100 text-orange-800",
  high: "bg-red-100 text-red-800",
  critical: "bg-purple-100 text-purple-800",
}

export default function RecentAlerts() {
  const { alerts, resolveAlert, investigateAlert } = useAppContext()
  const [selectedAlert, setSelectedAlert] = useState<string | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)

  // Get only the most recent 3 alerts
  const recentAlerts = alerts.slice(0, 3)

  const handleViewDetails = (alertId: string) => {
    setSelectedAlert(alertId)
    setIsModalOpen(true)
  }

  if (recentAlerts.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center h-[200px] text-muted-foreground">
        <AlertCircle className="h-10 w-10 mb-2" />
        <p>No recent alerts</p>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      {recentAlerts.map((alert) => (
        <div
          key={alert.id}
          className={`flex items-start space-x-4 p-3 rounded-md border ${
            alert.severity === "critical" || alert.severity === "high" ? "bg-red-50 border-red-200 animate-pulse" : ""
          }`}
        >
          <div className={`p-2 rounded-full ${severityColors[alert.severity]} bg-opacity-20`}>{alert.icon}</div>
          <div className="flex-1 space-y-1">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <p className="font-medium">{alert.type}</p>
                <Badge
                  variant={
                    alert.severity === "critical" || alert.severity === "high"
                      ? "destructive"
                      : alert.severity === "medium"
                        ? "default"
                        : "outline"
                  }
                >
                  {alert.severity.charAt(0).toUpperCase() + alert.severity.slice(1)}
                </Badge>
              </div>
              {alert.status === "active" && (
                <span className="animate-ping h-2 w-2 rounded-full bg-red-600 opacity-75"></span>
              )}
            </div>
            <p className="text-sm text-muted-foreground">{alert.message}</p>
            <p className="text-xs text-muted-foreground">{alert.timestamp}</p>
            <div className="flex gap-2 mt-2">
              <Button variant="outline" size="sm" onClick={() => handleViewDetails(alert.id)}>
                View Details
              </Button>
              {alert.status === "active" && (
                <>
                  <Button variant="outline" size="sm" onClick={() => investigateAlert(alert.id)}>
                    Investigate
                  </Button>
                  <Button size="sm" onClick={() => resolveAlert(alert.id)}>
                    Resolve
                  </Button>
                </>
              )}
              {alert.status === "investigating" && (
                <Button size="sm" onClick={() => resolveAlert(alert.id)}>
                  Mark Resolved
                </Button>
              )}
              {alert.status === "resolved" && <span className="text-xs text-green-600 font-medium">Resolved</span>}
            </div>
          </div>
        </div>
      ))}

      {selectedAlert && (
        <AlertDetailModal
          alert={alerts.find((a) => a.id === selectedAlert) || null}
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onResolve={resolveAlert}
          onInvestigate={investigateAlert}
        />
      )}
    </div>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\scan-details-modal.tsx

"use client"

import { useAppContext } from "@/context/app-context"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { FileSearch, CheckCircle, AlertTriangle } from "lucide-react"
import { useState, useEffect } from "react"

interface ScanDetailsModalProps {
  isOpen: boolean
  onClose: () => void
}

export function ScanDetailsModal({ isOpen, onClose }: ScanDetailsModalProps) {
  const { isScanning, scanProgress, scannedFiles, currentScanningFile } = useAppContext()
  const [stats, setStats] = useState({
    totalFiles: 0,
    fileTypes: {} as Record<string, number>,
    directories: {} as Record<string, number>,
  })

  // Calculate statistics when scanned files change
  useEffect(() => {
    if (scannedFiles.length === 0) return

    const fileTypes: Record<string, number> = {}
    const directories: Record<string, number> = {}

    scannedFiles.forEach((file) => {
      // Get file extension
      const extension = file.split(".").pop() || "unknown"
      fileTypes[extension] = (fileTypes[extension] || 0) + 1

      // Get directory
      const directory = file.substring(0, file.lastIndexOf("\\"))
      directories[directory] = (directories[directory] || 0) + 1
    })

    setStats({
      totalFiles: scannedFiles.length,
      fileTypes,
      directories,
    })
  }, [scannedFiles])

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            {isScanning ? (
              <>
                <FileSearch className="h-5 w-5 text-blue-500 animate-pulse" />
                Scan in Progress
              </>
            ) : (
              <>
                <CheckCircle className="h-5 w-5 text-green-500" />
                Scan Complete
              </>
            )}
          </DialogTitle>
          <DialogDescription>
            {isScanning
              ? "Scanning your system for potential threats..."
              : `Scan completed. ${stats.totalFiles} files were scanned.`}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {isScanning && (
            <>
              <div className="flex items-center justify-between">
                <span className="text-sm">Progress</span>
                <span className="text-sm font-medium">{scanProgress}%</span>
              </div>
              <Progress value={scanProgress} className="h-2" />

              {currentScanningFile && (
                <div className="text-sm">
                  Currently scanning: <span className="font-mono text-xs">{currentScanningFile}</span>
                </div>
              )}
            </>
          )}

          <div>
            <h4 className="text-sm font-medium mb-2">Scanned Files</h4>
            <ScrollArea className="h-[200px] rounded border p-2">
              <div className="space-y-1">
                {scannedFiles
                  .slice(-100)
                  .reverse()
                  .map((file, index) => (
                    <div key={index} className="text-xs font-mono flex items-center">
                      <span className="flex-1 truncate">{file}</span>
                      {file.endsWith(".exe") && (
                        <AlertTriangle className="h-3 w-3 text-yellow-500 ml-2 flex-shrink-0" />
                      )}
                    </div>
                  ))}
              </div>
            </ScrollArea>
          </div>

          {!isScanning && stats.totalFiles > 0 && (
            <div className="grid grid-cols-2 gap-4">
              <div>
                <h4 className="text-sm font-medium mb-2">File Types</h4>
                <ScrollArea className="h-[100px] rounded border p-2">
                  <div className="space-y-1">
                    {Object.entries(stats.fileTypes).map(([type, count]) => (
                      <div key={type} className="text-xs flex justify-between">
                        <span>.{type}</span>
                        <span className="font-medium">{count}</span>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </div>
              <div>
                <h4 className="text-sm font-medium mb-2">Directories</h4>
                <ScrollArea className="h-[100px] rounded border p-2">
                  <div className="space-y-1">
                    {Object.entries(stats.directories).map(([dir, count]) => (
                      <div key={dir} className="text-xs flex justify-between">
                        <span className="truncate flex-1">{dir}</span>
                        <span className="font-medium ml-2">{count}</span>
                      </div>
                    ))}
                  </div>
                </ScrollArea>
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button onClick={onClose}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\scan-progress.tsx

"use client"

import { useAppContext } from "@/context/app-context"
import { Progress } from "@/components/ui/progress"
import { ScrollArea } from "@/components/ui/scroll-area"
import { FileSearch } from "lucide-react"

export function ScanProgress() {
  const { isScanning, scanProgress, scannedFiles, currentScanningFile } = useAppContext()

  if (!isScanning) {
    return null
  }

  return (
    <div className="space-y-4 p-4 border rounded-md bg-muted/30">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FileSearch className="h-5 w-5 text-blue-500 animate-pulse" />
          <h3 className="font-medium">Scanning in progress...</h3>
        </div>
        <span className="text-sm font-medium">{scanProgress}%</span>
      </div>

      <Progress value={scanProgress} className="h-2" />

      {currentScanningFile && (
        <div className="text-sm text-muted-foreground">
          Currently scanning: <span className="font-mono text-xs">{currentScanningFile}</span>
        </div>
      )}

      <div className="mt-2">
        <h4 className="text-sm font-medium mb-1">Recently scanned files:</h4>
        <ScrollArea className="h-[100px] rounded border p-2 bg-background">
          <div className="space-y-1">
            {scannedFiles
              .slice(-10)
              .reverse()
              .map((file, index) => (
                <div key={index} className="text-xs font-mono text-muted-foreground">
                  {file}
                </div>
              ))}
          </div>
        </ScrollArea>
      </div>
    </div>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\system-status-card.tsx

import { Card, CardContent } from "@/components/ui/card"
import type { ReactNode } from "react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface SystemStatusCardProps {
  title: string
  status: string
  icon: ReactNode
  statusColor: string
  details?: string
  trend?: "up" | "down" | "stable"
  trendValue?: string
}

export default function SystemStatusCard({
  title,
  status,
  icon,
  statusColor,
  details,
  trend,
  trendValue,
}: SystemStatusCardProps) {
  return (
    <TooltipProvider>
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col space-y-2">
            <div className="flex items-center space-x-2 text-muted-foreground">
              {icon}
              <span className="text-sm font-medium">{title}</span>
            </div>
            <div className="flex items-center space-x-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <div className={`h-3 w-3 rounded-full ${statusColor} cursor-help`} />
                </TooltipTrigger>
                <TooltipContent>
                  <p>{details || `Status: ${status}`}</p>
                </TooltipContent>
              </Tooltip>
              <span className="text-2xl font-bold">{status}</span>
            </div>
            {trend && (
              <div className="flex items-center text-xs text-muted-foreground">
                {trend === "up" && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    className="w-4 h-4 text-green-500 mr-1"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 17a.75.75 0 01-.75-.75V5.612L5.29 9.77a.75.75 0 01-1.08-1.04l5.25-5.5a.75.75 0 011.08 0l5.25 5.5a.75.75 0 11-1.08 1.04l-3.96-4.158V16.25A.75.75 0 0110 17z"
                      clipRule="evenodd"
                    />
                  </svg>
                )}
                {trend === "down" && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    className="w-4 h-4 text-red-500 mr-1"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 3a.75.75 0 01.75.75v10.638l3.96-4.158a.75.75 0 111.08 1.04l-5.25 5.5a.75.75 0 01-1.08 0l-5.25-5.5a.75.75 0 111.08-1.04l3.96 4.158V3.75A.75.75 0 0110 3z"
                      clipRule="evenodd"
                    />
                  </svg>
                )}
                {trend === "stable" && (
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    className="w-4 h-4 text-blue-500 mr-1"
                  >
                    <path
                      fillRule="evenodd"
                      d="M4 10a.75.75 0 01.75-.75h10.5a.75.75 0 010 1.5H4.75A.75.75 0 014 10z"
                      clipRule="evenodd"
                    />
                  </svg>
                )}
                <span>{trendValue}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </TooltipProvider>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\theme-provider.tsx

'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\accordion.tsx

"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\alert-dialog.tsx

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\alert.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\aspect-ratio.tsx

"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\avatar.tsx

"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\badge.tsx

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\breadcrumb.tsx

import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\button.tsx

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\calendar.tsx

"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\card.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\carousel.tsx

"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\chart.tsx

"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\checkbox.tsx

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\collapsible.tsx

"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\command.tsx

"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\context-menu.tsx

"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\dialog.tsx

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\drawer.tsx

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\dropdown-menu.tsx

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\form.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\hover-card.tsx

"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\input-otp.tsx

"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\input.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\label.tsx

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\menubar.tsx

"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\navigation-menu.tsx

import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\pagination.tsx

import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\popover.tsx

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\progress.tsx

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\radio-group.tsx

"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\resizable.tsx

"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\scroll-area.tsx

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\select.tsx

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\separator.tsx

"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\sheet.tsx

"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\sidebar.tsx

"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\skeleton.tsx

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\slider.tsx

"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\sonner.tsx

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\switch.tsx

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\table.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\tabs.tsx

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\textarea.tsx

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\toast.tsx

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className,
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\toaster.tsx

"use client"

import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(({ id, title, description, action, ...props }) => (
        <Toast key={id} {...props}>
          <div className="grid gap-1">
            {title && <ToastTitle>{title}</ToastTitle>}
            {description && <ToastDescription>{description}</ToastDescription>}
          </div>
          {action}
          <ToastClose />
        </Toast>
      ))}
      <ToastViewport />
    </ToastProvider>
  )
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\toggle-group.tsx

"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\toggle.tsx

"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\tooltip.tsx

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\components\ui\use-toast.ts

"use client"

import * as React from "react"

import type { ToastActionElement, ToastProps } from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case actionTypes.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),
      }

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      }
    }
    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id })

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),
  }
}

function addToRemoveQueue(toastId: string) {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: actionTypes.REMOVE_TOAST,
      toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export { useToast, toast }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\context\app-context.tsx

"use client"

import type React from "react"
import { createContext, useContext, useState, useEffect } from "react"
import { Activity, FileWarning, HardDrive, Network } from "lucide-react"
import * as FileSystemMonitor from "@/services/file-system-monitor"

// Define types for our context
type SystemStatus = "Protected" | "At Risk" | "Under Attack" | "Scanning"
type AlertSeverity = "low" | "medium" | "high" | "critical"
type AlertStatus = "active" | "resolved" | "investigating"
type IconType = "FileWarning" | "HardDrive" | "Network" | "Activity"

// Modified Alert interface with iconType instead of icon JSX element
export interface Alert {
  id: string
  type: string
  message: string
  timestamp: string
  severity: AlertSeverity
  status: AlertStatus
  details: string
  iconType: IconType
  icon?: React.ReactNode // This won't be stored in localStorage
  affectedFiles?: string[]
  suspiciousProcesses?: {
    pid: number
    name: string
    reason: string
  }[]
  aiAnalysis?: string
}

// Add these new state variables to the AppContextType interface
interface AppContextType {
  systemStatus: SystemStatus
  activeThreats: number
  filesMonitored: number
  aiEngineStatus: "Online" | "Offline" | "Learning"
  alerts: Alert[]
  isScanning: boolean
  scanProgress: number
  scannedFiles: string[]
  currentScanningFile: string | null
  fileEvents: FileSystemMonitor.FileEvent[]
  honeypotFiles: string[]
  aiPredictions: {
    timestamp: string
    prediction: string
    confidence: number
    threatType?: string
  }[]
  targetDirectory: string
  runScan: () => void
  resolveAlert: (id: string) => void
  investigateAlert: (id: string) => void
  refreshData: () => void
  blockProcess: (pid: number, processName: string) => Promise<boolean>
  createBackup: () => Promise<void>
  runAiAnalysis: () => Promise<void>
  simulateRansomwareAttack: () => void
}

const AppContext = createContext<AppContextType | undefined>(undefined)

// Helper function to get icon component from iconType
const getIconComponent = (iconType: IconType): React.JSX.Element => {
  switch (iconType) {
    case "FileWarning":
      return <FileWarning className="h-5 w-5" />
    case "HardDrive":
      return <HardDrive className="h-5 w-5" />
    case "Network":
      return <Network className="h-5 w-5" />
    case "Activity":
      return <Activity className="h-5 w-5" />
    default:
      return <FileWarning className="h-5 w-5" />
  }
}

// Helper function to load state from localStorage
const loadFromStorage = <T,>(key: string, defaultValue: T): T => {
  if (typeof window === "undefined") return defaultValue
  try {
    const stored = localStorage.getItem(key)
    return stored ? JSON.parse(stored) : defaultValue
  } catch (error) {
    console.error(`Error loading ${key} from localStorage:`, error)
    return defaultValue
  }
}

// Helper function to save state to localStorage
const saveToStorage = <T,>(key: string, value: T): void => {
  if (typeof window === "undefined") return
  try {
    localStorage.setItem(key, JSON.stringify(value))
  } catch (error) {
    console.error(`Error saving ${key} to localStorage:`, error)
  }
}

// Add these new state variables to the AppProvider component
export function AppProvider({ children }: { children: React.ReactNode }) {
  // Load initial state from localStorage
  const [systemStatus, setSystemStatus] = useState<SystemStatus>(() => loadFromStorage("systemStatus", "Protected"))
  const [activeThreats, setActiveThreats] = useState(() => loadFromStorage("activeThreats", 0))
  const [filesMonitored, setFilesMonitored] = useState(() => loadFromStorage("filesMonitored", 30))
  const [aiEngineStatus, setAiEngineStatus] = useState<"Online" | "Offline" | "Learning">(() =>
    loadFromStorage("aiEngineStatus", "Online"),
  )
  const [isScanning, setIsScanning] = useState(false)
  const [scanProgress, setScanProgress] = useState(0)
  const [scannedFiles, setScannedFiles] = useState<string[]>([])
  const [currentScanningFile, setCurrentScanningFile] = useState<string | null>(null)
  const [fileEvents, setFileEvents] = useState<FileSystemMonitor.FileEvent[]>(() => loadFromStorage("fileEvents", []))
  const [honeypotFiles, setHoneypotFiles] = useState<string[]>([])
  const [aiPredictions, setAiPredictions] = useState<
    {
      timestamp: string
      prediction: string
      confidence: number
      threatType?: string
    }[]
  >(() => loadFromStorage("aiPredictions", []))

  // Use the target directory from the file system monitor
  const targetDirectory = FileSystemMonitor.TARGET_DIRECTORY

  // Initial alerts data - load from storage and add icon components
  const [alerts, setAlerts] = useState<Alert[]>(() => {
    const storedAlerts = loadFromStorage<Omit<Alert, "icon">[]>("alerts", [])

    if (storedAlerts.length > 0) {
      // Add icon components based on iconType
      return storedAlerts.map((alert) => ({
        ...alert,
        icon: getIconComponent(alert.iconType),
      }))
    }

    // Default alerts if none in storage
    return []
  })

  // Persist state changes to localStorage
  useEffect(() => {
    saveToStorage("systemStatus", systemStatus)
  }, [systemStatus])

  useEffect(() => {
    saveToStorage("activeThreats", activeThreats)
  }, [activeThreats])

  useEffect(() => {
    saveToStorage("filesMonitored", filesMonitored)
  }, [filesMonitored])

  useEffect(() => {
    saveToStorage("aiEngineStatus", aiEngineStatus)
  }, [aiEngineStatus])

  useEffect(() => {
    saveToStorage("fileEvents", fileEvents)
  }, [fileEvents])

  useEffect(() => {
    // Save alerts without the icon JSX element
    const serializableAlerts = alerts.map(({ icon, ...rest }) => rest)
    saveToStorage("alerts", serializableAlerts)
  }, [alerts])

  useEffect(() => {
    saveToStorage("aiPredictions", aiPredictions)
  }, [aiPredictions])

  // Initialize honeypot files
  useEffect(() => {
    const honeypots = FileSystemMonitor.createHoneypots(targetDirectory)
    setHoneypotFiles(honeypots)
  }, [targetDirectory])

  // Simulate file system events - but less frequently and with normal activity
  useEffect(() => {
    const interval = setInterval(() => {
      // Generate normal file events (no ransomware simulation)
      const newEvents = FileSystemMonitor.generateMockFileEvents(3, false)
      setFileEvents((prev) => [...newEvents, ...prev].slice(0, 100)) // Keep last 100 events
    }, 60000) // Check every 60 seconds - less frequent than before

    return () => clearInterval(interval)
  }, [])

  // Simulate a ransomware attack
  const simulateRansomwareAttack = () => {
    // Generate ransomware events
    const ransomwareEvents = FileSystemMonitor.generateMockFileEvents(20, true)
    setFileEvents((prev) => [...ransomwareEvents, ...prev].slice(0, 100))

    // Analyze the events
    const result = FileSystemMonitor.analyzeFileEvents(ransomwareEvents)

    // Create alerts based on the analysis
    if (result.isRansomware) {
      // Create a critical alert for the ransomware detection
      const iconType: IconType = "FileWarning"

      const newAlert: Alert = {
        id: `${Date.now()}`,
        type: "Ransomware Attack",
        message: "Ransomware activity detected in test directory",
        timestamp: new Date().toLocaleString(),
        severity: "critical",
        status: "active",
        details: `${result.reason}. Multiple files are being encrypted or renamed with suspicious extensions.`,
        iconType,
        icon: getIconComponent(iconType),
        affectedFiles: result.affectedFiles,
        suspiciousProcesses: result.suspiciousProcesses,
        aiAnalysis: `The AI engine has detected a ransomware attack with ${(result.confidence * 100).toFixed(0)}% confidence. The attack shows classic signs of ransomware behavior including file encryption, extension changes, and the creation of ransom notes. Immediate action is required to prevent further data loss.`,
      }

      setAlerts((prev) => [newAlert, ...prev])
      setActiveThreats((prev) => prev + 1)
      setSystemStatus("Under Attack")

      // Add AI prediction
      setAiPredictions((prev) =>
        [
          {
            timestamp: new Date().toLocaleString(),
            prediction: "Ransomware Attack In Progress",
            confidence: result.confidence,
            threatType: "File Encryption & Ransom Notes",
          },
          ...prev,
        ].slice(0, 10),
      )
    }
  }

  // Run AI analysis on demand
  const runAiAnalysis = async (): Promise<void> => {
    setAiEngineStatus("Learning")

    // Simulate AI analysis delay
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // Analyze recent file events
    const recentEvents = fileEvents.slice(0, 30)
    const result = FileSystemMonitor.analyzeFileEvents(recentEvents)

    // Generate a new AI prediction based on the analysis
    const newPrediction = {
      timestamp: new Date().toLocaleString(),
      prediction: result.isRansomware ? "Potential Ransomware Activity" : "Normal System Activity",
      confidence: result.isRansomware ? result.confidence : 0.95,
      threatType: result.isRansomware ? result.reason : undefined,
    }

    setAiPredictions((prev) => [newPrediction, ...prev].slice(0, 10))

    // If ransomware detected, create an alert
    if (result.isRansomware) {
      const iconType: IconType = "Activity"

      const newAlert: Alert = {
        id: `${Date.now()}`,
        type: "AI Detection",
        message: "AI engine detected potential ransomware activity",
        timestamp: new Date().toLocaleString(),
        severity: result.confidence > 0.7 ? "high" : "medium",
        status: "active",
        details: `The AI engine has detected patterns consistent with ransomware activity with ${(result.confidence * 100).toFixed(0)}% confidence.`,
        iconType,
        icon: getIconComponent(iconType),
        affectedFiles: result.affectedFiles,
        suspiciousProcesses: result.suspiciousProcesses,
        aiAnalysis: `Based on behavioral analysis, the AI engine has detected patterns that match known ransomware behavior with ${(result.confidence * 100).toFixed(0)}% confidence. The system is observing unusual file operations and potential encryption activities.`,
      }

      setAlerts((prev) => [newAlert, ...prev])
      setActiveThreats((prev) => prev + 1)
      setSystemStatus("At Risk")
    }

    setAiEngineStatus("Online")
  }

  // Update the runScan function to use our file system monitor
  const runScan = () => {
    setIsScanning(true)
    setSystemStatus("Scanning")
    setScanProgress(0)
    setScannedFiles([])
    setCurrentScanningFile(null)

    // Only scan the target directory
    const directoriesToScan = [targetDirectory]

    // Simulate scanning each directory
    let dirIndex = 0
    let totalFiles: string[] = []
    let scannedCount = 0

    const scanNextDirectory = () => {
      if (dirIndex < directoriesToScan.length) {
        const dir = directoriesToScan[dirIndex]
        setCurrentScanningFile(`Scanning directory: ${dir}`)

        // Simulate scanning this directory
        FileSystemMonitor.simulateScan(dir).then((files) => {
          totalFiles = [...totalFiles, ...files]
          dirIndex++
          scanNextDirectory()
        })
      } else {
        // All directories queued for scanning, now process files
        if (totalFiles.length === 0) {
          finishScan()
          return
        }

        // Process files with a delay to show progress
        const processInterval = setInterval(() => {
          if (scannedCount < totalFiles.length) {
            const currentFile = totalFiles[scannedCount]
            setCurrentScanningFile(currentFile)
            setScannedFiles((prev) => [...prev, currentFile])

            scannedCount++
            const progress = Math.floor((scannedCount / totalFiles.length) * 100)
            setScanProgress(progress)
          } else {
            clearInterval(processInterval)
            finishScan()
          }
        }, 50) // Update every 50ms for a smooth simulation
      }
    }

    const finishScan = () => {
      // Analyze the scanned files for threats
      setIsScanning(false)
      setCurrentScanningFile(null)
      setFilesMonitored(totalFiles.length)

      // Check if there are any active threats
      const hasActiveThreats = alerts.some((alert) => alert.status === "active")

      if (hasActiveThreats) {
        setSystemStatus("At Risk")
      } else {
        setSystemStatus("Protected")
      }
    }

    // Start the scanning process
    scanNextDirectory()
  }

  // Block a suspicious process
  const blockProcess = async (pid: number, processName: string): Promise<boolean> => {
    try {
      const success = await FileSystemMonitor.simulateProcessBlock(pid, processName)

      if (success) {
        // Update alerts to mark this process as blocked
        setAlerts((prev) =>
          prev.map((alert) => {
            if (alert.suspiciousProcesses?.some((p) => p.pid === pid)) {
              const updatedProcesses = alert.suspiciousProcesses.map((p) =>
                p.pid === pid ? { ...p, reason: `${p.reason} (BLOCKED)` } : p,
              )
              return { ...alert, suspiciousProcesses: updatedProcesses }
            }
            return alert
          }),
        )

        // Add AI prediction about the block
        setAiPredictions((prev) =>
          [
            {
              timestamp: new Date().toLocaleString(),
              prediction: "Process Successfully Blocked",
              confidence: 1.0,
              threatType: "Process Termination",
            },
            ...prev,
          ].slice(0, 10),
        )
      }

      return success
    } catch (error) {
      console.error("Error blocking process:", error)
      return false
    }
  }

  // Create a backup
  const createBackup = async (): Promise<void> => {
    try {
      const backupDir = `C:\\Backups\\Backup_${Date.now()}`
      const result = await FileSystemMonitor.backupFiles(targetDirectory, backupDir)
      console.log(`Backup completed: ${result.copiedFiles} files, ${result.copiedDirs} directories`)

      // Add AI prediction about the backup
      setAiPredictions((prev) =>
        [
          {
            timestamp: new Date().toLocaleString(),
            prediction: "Backup Successfully Created",
            confidence: 1.0,
          },
          ...prev,
        ].slice(0, 10),
      )
    } catch (error) {
      console.error("Error creating backup:", error)
    }
  }

  // Resolve an alert
  const resolveAlert = (id: string) => {
    setAlerts((prev) =>
      prev.map((alert) => (alert.id === id ? { ...alert, status: "resolved" as AlertStatus } : alert)),
    )

    // Update active threats count
    const activeCount = alerts.filter((alert) => alert.id !== id && alert.status === "active").length

    setActiveThreats(activeCount)

    // Update system status if no more active threats
    if (activeCount === 0) {
      setSystemStatus("Protected")
    }

    // Add AI prediction about the resolution
    setAiPredictions((prev) =>
      [
        {
          timestamp: new Date().toLocaleString(),
          prediction: "Alert Resolved",
          confidence: 1.0,
        },
        ...prev,
      ].slice(0, 10),
    )
  }

  // Investigate an alert
  const investigateAlert = (id: string) => {
    setAlerts((prev) =>
      prev.map((alert) => (alert.id === id ? { ...alert, status: "investigating" as AlertStatus } : alert)),
    )

    // Add AI prediction about the investigation
    setAiPredictions((prev) =>
      [
        {
          timestamp: new Date().toLocaleString(),
          prediction: "Alert Under Investigation",
          confidence: 1.0,
        },
        ...prev,
      ].slice(0, 10),
    )
  }

  // Refresh data
  const refreshData = () => {
    // Simulate data refresh
    setFilesMonitored((prev) => prev + Math.floor(Math.random() * 5))

    // Generate new file events
    const newEvents = FileSystemMonitor.generateMockFileEvents(5, false)
    setFileEvents((prev) => [...newEvents, ...prev].slice(0, 100))

    // Analyze for threats
    const result = FileSystemMonitor.analyzeFileEvents(newEvents)

    if (result.isRansomware) {
      const severity: AlertSeverity =
        result.confidence > 0.7
          ? "critical"
          : result.confidence > 0.5
            ? "high"
            : result.confidence > 0.3
              ? "medium"
              : "low"

      const iconType: IconType = result.reason.includes("entropy") ? "FileWarning" : "HardDrive"

      const newThreat: Alert = {
        id: `${Date.now()}`,
        type: result.reason.includes("entropy") ? "File Encryption" : "Suspicious Activity",
        message: result.reason,
        timestamp: new Date().toLocaleString(),
        severity,
        status: "active" as AlertStatus,
        details: `Detected suspicious activity during refresh: ${result.reason}`,
        iconType,
        icon: getIconComponent(iconType),
        affectedFiles: result.affectedFiles,
        suspiciousProcesses: result.suspiciousProcesses,
        aiAnalysis: `The AI engine has analyzed this event with ${(result.confidence * 100).toFixed(0)}% confidence that it represents a potential ransomware attack. The pattern of ${result.reason.toLowerCase()} is consistent with known ransomware behavior.`,
      }

      setAlerts((prev) => [newThreat, ...prev])
      setActiveThreats((prev) => prev + 1)
      setSystemStatus("At Risk")

      // Add AI prediction
      setAiPredictions((prev) =>
        [
          {
            timestamp: new Date().toLocaleString(),
            prediction: "Ransomware Activity Detected",
            confidence: result.confidence,
            threatType: result.reason.includes("entropy") ? "Encryption Activity" : "Suspicious Behavior",
          },
          ...prev,
        ].slice(0, 10),
      )
    }
  }

  // Update active threats count on component mount
  useEffect(() => {
    const activeCount = alerts.filter((alert) => alert.status === "active").length
    setActiveThreats(activeCount)

    if (activeCount > 0) {
      setSystemStatus("At Risk")
    }
  }, [alerts])

  // Update the value object to include the new state variables
  const value = {
    systemStatus,
    activeThreats,
    filesMonitored,
    aiEngineStatus,
    alerts,
    isScanning,
    scanProgress,
    scannedFiles,
    currentScanningFile,
    fileEvents,
    honeypotFiles,
    aiPredictions,
    targetDirectory,
    runScan,
    resolveAlert,
    investigateAlert,
    refreshData,
    blockProcess,
    createBackup,
    runAiAnalysis,
    simulateRansomwareAttack,
  }

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>
}

export function useAppContext() {
  const context = useContext(AppContext)
  if (context === undefined) {
    throw new Error("useAppContext must be used within an AppProvider")
  }
  return context
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\hooks\use-mobile.tsx

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\hooks\use-toast.ts

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\lib\ai-detection.ts

// This file contains the core AI detection logic for ransomware behavior

// Entropy calculation function to detect encryption
export function calculateEntropy(buffer: ArrayBuffer): number {
  const array = new Uint8Array(buffer)
  const length = array.length

  // Count occurrences of each byte value
  const counts = new Array(256).fill(0)
  for (let i = 0; i < length; i++) {
    counts[array[i]]++
  }

  // Calculate entropy using Shannon's formula
  let entropy = 0
  for (let i = 0; i < 256; i++) {
    if (counts[i] > 0) {
      const probability = counts[i] / length
      entropy -= probability * Math.log2(probability)
    }
  }

  // Normalize to 0-1 range
  return entropy / 8
}

// Detect suspicious file extension changes
export function detectSuspiciousExtensions(oldExt: string, newExt: string): boolean {
  const knownRansomwareExtensions = [
    "locked",
    "encrypt",
    "crypted",
    "crypt",
    "crypto",
    "pay",
    "ransom",
    "vault",
    "wcry",
    "wncry",
    "wncryt",
    "encrypted",
    "enc",
    "WNCRY",
    "WCRY",
    "WNCRYPT",
    "CRAB",
    "THOR",
    "LOL!",
    "THANOS",
    "CRYPT",
    "LOCK",
    "KEYBTC@INBOX_COM",
    "SAGE",
    "CRYPTED",
    "CRINF",
  ]

  // Check if the new extension is a known ransomware extension
  return knownRansomwareExtensions.some((ext) => newExt.toLowerCase().includes(ext.toLowerCase()))
}

// Analyze process behavior for ransomware patterns
export function analyzeProcessBehavior(
  processName: string,
  fileOperations: Array<{
    type: string
    path: string
    timestamp: number
  }>,
): {
  suspiciousScore: number
  reasons: string[]
} {
  const reasons: string[] = []
  let suspiciousScore = 0

  // Check for high frequency of operations
  if (fileOperations.length > 50) {
    suspiciousScore += 0.2
    reasons.push("High frequency of file operations")
  }

  // Check for operations across multiple directories
  const directories = new Set(fileOperations.map((op) => op.path.substring(0, op.path.lastIndexOf("/"))))

  if (directories.size > 5) {
    suspiciousScore += 0.2
    reasons.push("Operations across multiple directories")
  }

  // Check for operations on many files in a short time
  const timespan =
    Math.max(...fileOperations.map((op) => op.timestamp)) - Math.min(...fileOperations.map((op) => op.timestamp))

  if (fileOperations.length > 20 && timespan < 60000) {
    // 1 minute
    suspiciousScore += 0.3
    reasons.push("Many files accessed in a short time period")
  }

  // Check for suspicious process name
  const suspiciousProcessPatterns = ["ransom", "crypt", "locker", "lock", "encrypt", "decrypt"]

  if (suspiciousProcessPatterns.some((pattern) => processName.toLowerCase().includes(pattern))) {
    suspiciousScore += 0.3
    reasons.push("Suspicious process name")
  }

  return {
    suspiciousScore: Math.min(suspiciousScore, 1), // Cap at 1.0
    reasons,
  }
}

// Main detection function that combines all checks
export async function detectRansomware(
  fileOperations: any[],
  processInfo: any,
  fileContents: Map<string, ArrayBuffer>,
): Promise<{
  isRansomware: boolean
  confidence: number
  details: string[]
  recommendedActions: string[]
}> {
  const details: string[] = []
  let totalConfidence = 0

  // Check file operations
  const behaviorAnalysis = analyzeProcessBehavior(processInfo.name, fileOperations)

  totalConfidence += behaviorAnalysis.confidence * 0.4 // 40% weight
  details.push(...behaviorAnalysis.reasons)

  // Check file entropy
  let highEntropyCount = 0

  for (const [filePath, buffer] of fileContents.entries()) {
    const entropy = calculateEntropy(buffer)
    if (entropy > 0.8) {
      highEntropyCount++
    }
  }

  if (highEntropyCount > 0) {
    const entropyConfidence = Math.min(highEntropyCount / 10, 1) * 0.4 // 40% weight
    totalConfidence += entropyConfidence
    details.push(`${highEntropyCount} files with high entropy detected`)
  }

  // Check extension changes
  const extensionChanges = fileOperations.filter((op) => op.type === "rename" && op.oldPath && op.newPath)

  let suspiciousExtensionCount = 0

  for (const change of extensionChanges) {
    const oldExt = change.oldPath.split(".").pop() || ""
    const newExt = change.newPath.split(".").pop() || ""

    if (detectSuspiciousExtensions(oldExt, newExt)) {
      suspiciousExtensionCount++
    }
  }

  if (suspiciousExtensionCount > 0) {
    const extensionConfidence = Math.min(suspiciousExtensionCount / 5, 1) * 0.2 // 20% weight
    totalConfidence += extensionConfidence
    details.push(`${suspiciousExtensionCount} suspicious file extension changes detected`)
  }

  // Determine if it's ransomware based on confidence threshold
  const isRansomware = totalConfidence > 0.6 // 60% confidence threshold

  // Generate recommended actions
  const recommendedActions = []

  if (isRansomware) {
    recommendedActions.push("Terminate and block the suspicious process")
    recommendedActions.push("Isolate affected system from network")
    recommendedActions.push("Create system snapshot for recovery")
    recommendedActions.push("Scan for additional malware")
  } else if (totalConfidence > 0.3) {
    recommendedActions.push("Monitor the process for additional suspicious activity")
    recommendedActions.push("Backup important files as a precaution")
  }

  return {
    isRansomware,
    confidence: totalConfidence,
    details,
    recommendedActions,
  }
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\lib\utils.ts

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\services\file-system-monitor.tsx

// /**
//  * File System Monitor Service
//  * Based on the Python implementation provided
//  */

// // Constants for detection thresholds
// const ENTROPY_THRESHOLD = 7.0
// const RAPID_MODIFICATION_WINDOW_SECONDS = 10
// const RAPID_MODIFICATION_THRESHOLD = 10
// const HONEYPOT_FILE_COUNT = 5
// const RANSOM_NOTE_KEYWORDS = ["DECRYPT", "RANSOM", "RECOVER", "README", "HELP", "INSTRUCTION"]
// const EXECUTABLE_EXTENSIONS = [".exe", ".dll", ".bat", ".scr", ".com"]

// // Types for file events
// export type FileOperation = "create" | "modify" | "delete" | "rename"
// export type FileEvent = {
//   path: string
//   operation: FileOperation
//   timestamp: number
//   process?: {
//     name: string
//     pid: number
//   }
//   metadata?: {
//     oldPath?: string
//     newPath?: string
//     entropy?: number
//     size?: number
//   }
// }

// // Types for detection results
// export type DetectionResult = {
//   isRansomware: boolean
//   confidence: number
//   reason: string
//   affectedFiles: string[]
//   suspiciousProcesses: {
//     pid: number
//     name: string
//     reason: string
//   }[]
//   timestamp: number
// }

// // Mock file system events (in a real implementation, this would use native file system APIs)
// export function generateMockFileEvents(count = 20): FileEvent[] {
//   const operations: FileOperation[] = ["create", "modify", "delete", "rename"]
//   const processes = [
//     { name: "explorer.exe", pid: 1234 },
//     { name: "chrome.exe", pid: 5678 },
//     { name: "word.exe", pid: 9012 },
//     { name: "suspicious.exe", pid: 3456 },
//   ]
//   const filePaths = [
//     "C:\\Users\\User\\Documents\\important.docx",
//     "C:\\Users\\User\\Documents\\financial.xlsx",
//     "C:\\Users\\User\\Pictures\\vacation.jpg",
//     "C:\\Users\\User\\Downloads\\setup.exe",
//     "C:\\Program Files\\Application\\data.db",
//   ]

//   const events: FileEvent[] = []
//   const now = Date.now()

//   for (let i = 0; i < count; i++) {
//     const operation = operations[Math.floor(Math.random() * operations.length)]
//     const process = processes[Math.floor(Math.random() * processes.length)]
//     const filePath = filePaths[Math.floor(Math.random() * filePaths.length)]

//     const event: FileEvent = {
//       path: filePath,
//       operation,
//       timestamp: now - Math.floor(Math.random() * 300000), // Random time in the last 5 minutes
//       process: { ...process },
//       metadata: {},
//     }

//     // Add operation-specific metadata
//     if (operation === "modify") {
//       event.metadata = {
//         size: Math.floor(Math.random() * 1000000),
//         entropy: Math.random(), // Random entropy value between 0 and 1
//       }
//     } else if (operation === "rename") {
//       const oldPath = filePath
//       const newPath = filePath.replace(/\.[^/.]+$/, "") + (Math.random() > 0.7 ? ".encrypted" : ".bak")
//       event.metadata = {
//         oldPath,
//         newPath,
//       }
//     }

//     events.push(event)
//   }

//   // Add some suspicious ransomware-like events if random chance
//   if (Math.random() > 0.7) {
//     const suspiciousProcess = processes[3] // suspicious.exe

//     // Add multiple file renames with suspicious extensions
//     for (let i = 0; i < 5; i++) {
//       const originalPath = `C:\\Users\\User\\Documents\\important_file_${i}.docx`
//       events.push({
//         path: originalPath,
//         operation: "rename",
//         timestamp: now - Math.floor(Math.random() * 60000), // Last minute
//         process: { ...suspiciousProcess },
//         metadata: {
//           oldPath: originalPath,
//           newPath: `C:\\Users\\User\\Documents\\important_file_${i}.docx.locked`,
//         },
//       })
//     }

//     // Add high entropy writes
//     for (let i = 0; i < 5; i++) {
//       events.push({
//         path: `C:\\Users\\User\\Documents\\file_${i}.docx`,
//         operation: "modify",
//         timestamp: now - Math.floor(Math.random() * 60000), // Last minute
//         process: { ...suspiciousProcess },
//         metadata: {
//           size: Math.floor(Math.random() * 1000000),
//           entropy: 0.95 + Math.random() * 0.05, // Very high entropy (0.95-1.0)
//         },
//       })
//     }
//   }

//   return events
// }

// // Simulate scanning a directory
// export function simulateScan(directory: string): Promise<string[]> {
//   return new Promise((resolve) => {
//     // Simulate scanning by generating random files in the directory
//     const fileExtensions = [".docx", ".xlsx", ".pdf", ".jpg", ".png", ".txt", ".exe", ".dll", ".zip", ".mp4"]
//     const directories = [
//       "C:\\Users\\User\\Documents",
//       "C:\\Users\\User\\Downloads",
//       "C:\\Users\\User\\Desktop",
//       "C:\\Program Files",
//       "C:\\Windows\\System32",
//     ]

//     const scannedFiles: string[] = []

//     // Generate a list of files to scan
//     directories.forEach((dir) => {
//       for (let i = 0; i < Math.floor(Math.random() * 10) + 5; i++) {
//         const ext = fileExtensions[Math.floor(Math.random() * fileExtensions.length)]
//         scannedFiles.push(`${dir}\\file_${i}${ext}`)
//       }
//     })

//     // Simulate some delay
//     setTimeout(() => {
//       resolve(scannedFiles)
//     }, 500)
//   })
// }

// // Analyze file events for ransomware behavior
// export function analyzeFileEvents(events: FileEvent[]): DetectionResult {
//   // Initialize result
//   const result: DetectionResult = {
//     isRansomware: false,
//     confidence: 0,
//     reason: "No suspicious activity detected",
//     affectedFiles: [],
//     suspiciousProcesses: [],
//     timestamp: Date.now(),
//   }

//   // Check for high entropy files (potential encryption)
//   const highEntropyFiles = events.filter(
//     (event) => event.operation === "modify" && event.metadata?.entropy && event.metadata.entropy > 0.8,
//   )

//   if (highEntropyFiles.length > 3) {
//     result.isRansomware = true
//     result.confidence += 0.4
//     result.reason = "Multiple high entropy file modifications detected"
//     result.affectedFiles = highEntropyFiles.map((event) => event.path)

//     // Add suspicious process
//     if (highEntropyFiles[0].process) {
//       result.suspiciousProcesses.push({
//         pid: highEntropyFiles[0].process.pid,
//         name: highEntropyFiles[0].process.name,
//         reason: "Process performing high entropy writes",
//       })
//     }
//   }

//   // Check for suspicious file extensions (ransomware)
//   const suspiciousRenames = events.filter(
//     (event) =>
//       event.operation === "rename" &&
//       event.metadata?.newPath &&
//       /\.(encrypted|locked|crypto|ransom|crypt)$/i.test(event.metadata.newPath),
//   )

//   if (suspiciousRenames.length > 2) {
//     result.isRansomware = true
//     result.confidence += 0.5
//     result.reason = "Multiple files renamed with suspicious extensions"
//     result.affectedFiles = [...result.affectedFiles, ...suspiciousRenames.map((event) => event.path)]

//     // Add suspicious process
//     if (suspiciousRenames[0].process) {
//       result.suspiciousProcesses.push({
//         pid: suspiciousRenames[0].process.pid,
//         name: suspiciousRenames[0].process.name,
//         reason: "Process renaming files with suspicious extensions",
//       })
//     }
//   }

//   // Check for ransom note creation
//   const potentialRansomNotes = events.filter(
//     (event) =>
//       event.operation === "create" &&
//       RANSOM_NOTE_KEYWORDS.some((keyword) => event.path.toUpperCase().includes(keyword)),
//   )

//   if (potentialRansomNotes.length > 0) {
//     result.isRansomware = true
//     result.confidence += 0.7
//     result.reason = "Potential ransom note created"
//     result.affectedFiles = [...result.affectedFiles, ...potentialRansomNotes.map((event) => event.path)]

//     // Add suspicious process
//     if (potentialRansomNotes[0].process) {
//       result.suspiciousProcesses.push({
//         pid: potentialRansomNotes[0].process.pid,
//         name: potentialRansomNotes[0].process.name,
//         reason: "Process creating potential ransom note",
//       })
//     }
//   }

//   // Check for rapid file modifications
//   const fileModificationMap = new Map<string, number[]>()

//   events.forEach((event) => {
//     if (event.operation === "modify") {
//       if (!fileModificationMap.has(event.path)) {
//         fileModificationMap.set(event.path, [])
//       }
//       fileModificationMap.get(event.path)?.push(event.timestamp)
//     }
//   })

//   let rapidModificationCount = 0

//   fileModificationMap.forEach((timestamps, filePath) => {
//     if (timestamps.length >= RAPID_MODIFICATION_THRESHOLD) {
//       // Sort timestamps
//       timestamps.sort()

//       // Check if the modifications happened within the window
//       const timespan = timestamps[timestamps.length - 1] - timestamps[0]
//       if (timespan <= RAPID_MODIFICATION_WINDOW_SECONDS * 1000) {
//         rapidModificationCount++
//         result.affectedFiles.push(filePath)
//       }
//     }
//   })

//   if (rapidModificationCount > 3) {
//     result.isRansomware = true
//     result.confidence += 0.3
//     result.reason =
//       result.reason === "No suspicious activity detected"
//         ? "Rapid file modifications detected"
//         : `${result.reason}, rapid file modifications detected`
//   }

//   // Cap confidence at 1.0
//   result.confidence = Math.min(result.confidence, 1.0)

//   // Remove duplicate affected files
//   result.affectedFiles = [...new Set(result.affectedFiles)]

//   return result
// }

// // Simulate blocking a process
// export function simulateProcessBlock(pid: number, processName: string): Promise<boolean> {
//   return new Promise((resolve) => {
//     console.log(`Attempting to block process: ${processName} (PID: ${pid})`)

//     // Simulate some delay
//     setTimeout(() => {
//       // 80% success rate in simulation
//       const success = Math.random() > 0.2
//       console.log(`Process ${processName} (PID: ${pid}) ${success ? "blocked successfully" : "block failed"}`)
//       resolve(success)
//     }, 800)
//   })
// }

// // Create honeypot files
// export function createHoneypots(directory: string, count: number = HONEYPOT_FILE_COUNT): string[] {
//   console.log(`Creating ${count} honeypot files in ${directory}`)

//   // In a real implementation, this would create actual files
//   // For simulation, we'll just return paths
//   const honeypotFiles: string[] = []

//   for (let i = 0; i < count; i++) {
//     const filePath = `${directory}/honeypot_${i}_${Date.now()}.txt`
//     honeypotFiles.push(filePath)
//   }

//   return honeypotFiles
// }

// // Backup files
// export function backupFiles(
//   sourceDir: string,
//   backupDir: string,
// ): Promise<{
//   copiedFiles: number
//   copiedDirs: number
//   skippedFiles: number
// }> {
//   return new Promise((resolve) => {
//     console.log(`Backing up ${sourceDir} to ${backupDir}`)

//     // Simulate backup process
//     setTimeout(() => {
//       const result = {
//         copiedFiles: Math.floor(Math.random() * 100) + 50,
//         copiedDirs: Math.floor(Math.random() * 10) + 5,
//         skippedFiles: Math.floor(Math.random() * 10),
//       }

//       console.log(`Backup complete: ${result.copiedFiles} files, ${result.copiedDirs} directories`)
//       resolve(result)
//     }, 1500)
//   })
// }

/**
 * File System Monitor Service
 * Based on the Python implementation provided
 */

// Constants for detection thresholds
const ENTROPY_THRESHOLD = 7.0
const RAPID_MODIFICATION_WINDOW_SECONDS = 10
const RAPID_MODIFICATION_THRESHOLD = 10
const HONEYPOT_FILE_COUNT = 5
const RANSOM_NOTE_KEYWORDS = ["DECRYPT", "RANSOM", "RECOVER", "README", "HELP", "INSTRUCTION"]
const EXECUTABLE_EXTENSIONS = [".exe", ".dll", ".bat", ".scr", ".com"]
const RANSOMWARE_EXTENSIONS = [".encrypted", ".locked", ".crypto", ".ransom", ".crypt", ".pay", ".wallet"]

// The target directory to monitor
export const TARGET_DIRECTORY = "C:\\test"

// Types for file events
export type FileOperation = "create" | "modify" | "delete" | "rename"
export type FileEvent = {
  path: string
  operation: FileOperation
  timestamp: number
  process?: {
    name: string
    pid: number
  }
  metadata?: {
    oldPath?: string
    newPath?: string
    entropy?: number
    size?: number
  }
}

// Types for detection results
export type DetectionResult = {
  isRansomware: boolean
  confidence: number
  reason: string
  affectedFiles: string[]
  suspiciousProcesses: {
    pid: number
    name: string
    reason: string
  }[]
  timestamp: number
}

// Generate realistic file paths within the test directory
function generateRealisticFilePaths(count: number): string[] {
  const fileTypes = [
    { ext: ".docx", prefix: "Document_" },
    { ext: ".xlsx", prefix: "Spreadsheet_" },
    { ext: ".pdf", prefix: "Report_" },
    { ext: ".jpg", prefix: "Photo_" },
    { ext: ".png", prefix: "Image_" },
    { ext: ".txt", prefix: "Notes_" },
    { ext: ".pptx", prefix: "Presentation_" },
  ]

  const subfolders = ["", "Work/", "Personal/", "Projects/", "Financial/", "Images/"]
  const paths: string[] = []

  for (let i = 0; i < count; i++) {
    const fileType = fileTypes[Math.floor(Math.random() * fileTypes.length)]
    const subfolder = subfolders[Math.floor(Math.random() * subfolders.length)]
    const fileName = `${fileType.prefix}${Math.floor(Math.random() * 1000)}${fileType.ext}`
    paths.push(`${TARGET_DIRECTORY}\\${subfolder}${fileName}`)
  }

  return paths
}

// Mock file system events (in a real implementation, this would use native file system APIs)
export function generateMockFileEvents(count = 20, simulateRansomware = false): FileEvent[] {
  const operations: FileOperation[] = ["create", "modify", "delete", "rename"]
  const processes = [
    { name: "explorer.exe", pid: 1234 },
    { name: "chrome.exe", pid: 5678 },
    { name: "word.exe", pid: 9012 },
    { name: "suspicious.exe", pid: 3456 },
  ]

  // Generate realistic file paths
  const filePaths = generateRealisticFilePaths(20)

  const events: FileEvent[] = []
  const now = Date.now()

  // Generate normal file events
  for (let i = 0; i < count; i++) {
    const operation = operations[Math.floor(Math.random() * operations.length)]
    const process = processes[Math.floor(Math.random() * (processes.length - 1))] // Exclude suspicious.exe for normal events
    const filePath = filePaths[Math.floor(Math.random() * filePaths.length)]

    const event: FileEvent = {
      path: filePath,
      operation,
      timestamp: now - Math.floor(Math.random() * 300000), // Random time in the last 5 minutes
      process: { ...process },
      metadata: {},
    }

    // Add operation-specific metadata
    if (operation === "modify") {
      event.metadata = {
        size: Math.floor(Math.random() * 1000000),
        entropy: Math.random() * 0.6, // Normal files have lower entropy
      }
    } else if (operation === "rename") {
      const oldPath = filePath
      const newPath = filePath.replace(/\.[^/.]+$/, ".bak")
      event.metadata = {
        oldPath,
        newPath,
      }
    }

    events.push(event)
  }

  // If simulating ransomware, add suspicious events
  if (simulateRansomware) {
    const suspiciousProcess = processes[3] // suspicious.exe
    const ransomwareTimestamp = now - Math.floor(Math.random() * 60000) // Last minute

    // Create a ransom note
    events.push({
      path: `${TARGET_DIRECTORY}\\README_DECRYPT.txt`,
      operation: "create",
      timestamp: ransomwareTimestamp,
      process: { ...suspiciousProcess },
      metadata: {
        size: 2048,
        entropy: 0.3, // Text files have lower entropy
      },
    })

    // Add multiple file renames with suspicious extensions
    for (let i = 0; i < 10; i++) {
      if (i >= filePaths.length) break

      const originalPath = filePaths[i]
      const fileExt = originalPath.split(".").pop() || ""
      const ransomExt = RANSOMWARE_EXTENSIONS[Math.floor(Math.random() * RANSOMWARE_EXTENSIONS.length)]

      events.push({
        path: originalPath,
        operation: "rename",
        timestamp: ransomwareTimestamp - Math.floor(Math.random() * 10000), // Slightly different timestamps
        process: { ...suspiciousProcess },
        metadata: {
          oldPath: originalPath,
          newPath: `${originalPath}${ransomExt}`,
        },
      })
    }

    // Add high entropy writes (encryption)
    for (let i = 10; i < 15; i++) {
      if (i >= filePaths.length) break

      events.push({
        path: filePaths[i],
        operation: "modify",
        timestamp: ransomwareTimestamp - Math.floor(Math.random() * 15000),
        process: { ...suspiciousProcess },
        metadata: {
          size: Math.floor(Math.random() * 1000000),
          entropy: 0.95 + Math.random() * 0.05, // Very high entropy (0.95-1.0)
        },
      })
    }
  }

  return events
}

// Simulate scanning a directory
export function simulateScan(directory: string): Promise<string[]> {
  return new Promise((resolve) => {
    // Only scan the target directory
    if (directory !== TARGET_DIRECTORY) {
      resolve([])
      return
    }

    // Generate realistic files in the directory
    const scannedFiles = generateRealisticFilePaths(30)

    // Simulate some delay
    setTimeout(() => {
      resolve(scannedFiles)
    }, 500)
  })
}

// Analyze file events for ransomware behavior
export function analyzeFileEvents(events: FileEvent[]): DetectionResult {
  // Initialize result
  const result: DetectionResult = {
    isRansomware: false,
    confidence: 0,
    reason: "No suspicious activity detected",
    affectedFiles: [],
    suspiciousProcesses: [],
    timestamp: Date.now(),
  }

  // Check for high entropy files (potential encryption)
  const highEntropyFiles = events.filter(
    (event) => event.operation === "modify" && event.metadata?.entropy && event.metadata.entropy > 0.8,
  )

  if (highEntropyFiles.length > 3) {
    result.isRansomware = true
    result.confidence += 0.4
    result.reason = "Multiple high entropy file modifications detected"
    result.affectedFiles = highEntropyFiles.map((event) => event.path)

    // Add suspicious process
    if (highEntropyFiles[0].process) {
      result.suspiciousProcesses.push({
        pid: highEntropyFiles[0].process.pid,
        name: highEntropyFiles[0].process.name,
        reason: "Process performing high entropy writes",
      })
    }
  }

  // Check for suspicious file extensions (ransomware)
  const suspiciousRenames = events.filter(
    (event) =>
      event.operation === "rename" &&
      event.metadata?.newPath &&
      RANSOMWARE_EXTENSIONS.some((ext) => event.metadata?.newPath?.endsWith(ext)),
  )

  if (suspiciousRenames.length > 2) {
    result.isRansomware = true
    result.confidence += 0.5
    result.reason = "Multiple files renamed with suspicious extensions"
    result.affectedFiles = [...result.affectedFiles, ...suspiciousRenames.map((event) => event.path)]

    // Add suspicious process
    if (suspiciousRenames[0].process) {
      result.suspiciousProcesses.push({
        pid: suspiciousRenames[0].process.pid,
        name: suspiciousRenames[0].process.name,
        reason: "Process renaming files with suspicious extensions",
      })
    }
  }

  // Check for ransom note creation
  const potentialRansomNotes = events.filter(
    (event) =>
      event.operation === "create" &&
      RANSOM_NOTE_KEYWORDS.some((keyword) => event.path.toUpperCase().includes(keyword)),
  )

  if (potentialRansomNotes.length > 0) {
    result.isRansomware = true
    result.confidence += 0.7
    result.reason = "Potential ransom note created"
    result.affectedFiles = [...result.affectedFiles, ...potentialRansomNotes.map((event) => event.path)]

    // Add suspicious process
    if (potentialRansomNotes[0].process) {
      result.suspiciousProcesses.push({
        pid: potentialRansomNotes[0].process.pid,
        name: potentialRansomNotes[0].process.name,
        reason: "Process creating potential ransom note",
      })
    }
  }

  // Check for rapid file modifications
  const fileModificationMap = new Map<string, number[]>()

  events.forEach((event) => {
    if (event.operation === "modify") {
      if (!fileModificationMap.has(event.path)) {
        fileModificationMap.set(event.path, [])
      }
      fileModificationMap.get(event.path)?.push(event.timestamp)
    }
  })

  let rapidModificationCount = 0

  fileModificationMap.forEach((timestamps, filePath) => {
    if (timestamps.length >= RAPID_MODIFICATION_THRESHOLD) {
      // Sort timestamps
      timestamps.sort()

      // Check if the modifications happened within the window
      const timespan = timestamps[timestamps.length - 1] - timestamps[0]
      if (timespan <= RAPID_MODIFICATION_WINDOW_SECONDS * 1000) {
        rapidModificationCount++
        result.affectedFiles.push(filePath)
      }
    }
  })

  if (rapidModificationCount > 3) {
    result.isRansomware = true
    result.confidence += 0.3
    result.reason =
      result.reason === "No suspicious activity detected"
        ? "Rapid file modifications detected"
        : `${result.reason}, rapid file modifications detected`
  }

  // Cap confidence at 1.0
  result.confidence = Math.min(result.confidence, 1.0)

  // Remove duplicate affected files
  result.affectedFiles = [...new Set(result.affectedFiles)]

  return result
}

// Simulate blocking a process
export function simulateProcessBlock(pid: number, processName: string): Promise<boolean> {
  return new Promise((resolve) => {
    console.log(`Attempting to block process: ${processName} (PID: ${pid})`)

    // Simulate some delay
    setTimeout(() => {
      // 80% success rate in simulation
      const success = Math.random() > 0.2
      console.log(`Process ${processName} (PID: ${pid}) ${success ? "blocked successfully" : "block failed"}`)
      resolve(success)
    }, 800)
  })
}

// Create honeypot files
export function createHoneypots(directory: string, count: number = HONEYPOT_FILE_COUNT): string[] {
  console.log(`Creating ${count} honeypot files in ${directory}`)

  // In a real implementation, this would create actual files
  // For simulation, we'll just return paths
  const honeypotFiles: string[] = []

  for (let i = 0; i < count; i++) {
    const filePath = `${directory}/honeypot_${i}_${Date.now()}.txt`
    honeypotFiles.push(filePath)
  }

  return honeypotFiles
}

// Backup files
export function backupFiles(
  sourceDir: string,
  backupDir: string,
): Promise<{
  copiedFiles: number
  copiedDirs: number
  skippedFiles: number
}> {
  return new Promise((resolve) => {
    console.log(`Backing up ${sourceDir} to ${backupDir}`)

    // Simulate backup process
    setTimeout(() => {
      const result = {
        copiedFiles: Math.floor(Math.random() * 100) + 50,
        copiedDirs: Math.floor(Math.random() * 10) + 5,
        skippedFiles: Math.floor(Math.random() * 10),
      }

      console.log(`Backup complete: ${result.copiedFiles} files, ${result.copiedDirs} directories`)
      resolve(result)
    }, 1500)
  })
}

==================================================
*************** FILE SEPARATOR ***************
==================================================
FILE PATH: C:\Users\siwar\Downloads\ransomware-detection\styles\globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

==================================================
*************** FILE SEPARATOR ***************
==================================================

Total files processed: 84
Total files skipped: 26362